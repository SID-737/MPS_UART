
UART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08003810  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003810  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064f4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164e  00000000  00000000  00026528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00027b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00028228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000be04  00000000  00000000  00028810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065db  00000000  00000000  00034614  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000428d3  00000000  00000000  0003abef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d4c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017dc  00000000  00000000  0007d540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800376c 	.word	0x0800376c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800376c 	.word	0x0800376c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fbf3 	bl	8000a1c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb4b 	bl	80008dc <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbe5 	bl	8000a1c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fbdb 	bl	8000a1c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb6d 	bl	8000954 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb63 	bl	8000954 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f000 ff63 	bl	800117c <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f000 fc14 	bl	8000aec <__aeabi_dsub>
 80002c4:	f000 ff5a 	bl	800117c <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_ddiv>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4657      	mov	r7, sl
 80002dc:	46de      	mov	lr, fp
 80002de:	464e      	mov	r6, r9
 80002e0:	4645      	mov	r5, r8
 80002e2:	b5e0      	push	{r5, r6, r7, lr}
 80002e4:	4683      	mov	fp, r0
 80002e6:	0007      	movs	r7, r0
 80002e8:	030e      	lsls	r6, r1, #12
 80002ea:	0048      	lsls	r0, r1, #1
 80002ec:	b085      	sub	sp, #20
 80002ee:	4692      	mov	sl, r2
 80002f0:	001c      	movs	r4, r3
 80002f2:	0b36      	lsrs	r6, r6, #12
 80002f4:	0d40      	lsrs	r0, r0, #21
 80002f6:	0fcd      	lsrs	r5, r1, #31
 80002f8:	2800      	cmp	r0, #0
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0x26>
 80002fc:	e09d      	b.n	800043a <__aeabi_ddiv+0x162>
 80002fe:	4b95      	ldr	r3, [pc, #596]	; (8000554 <__aeabi_ddiv+0x27c>)
 8000300:	4298      	cmp	r0, r3
 8000302:	d039      	beq.n	8000378 <__aeabi_ddiv+0xa0>
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	00f6      	lsls	r6, r6, #3
 8000308:	041b      	lsls	r3, r3, #16
 800030a:	431e      	orrs	r6, r3
 800030c:	4a92      	ldr	r2, [pc, #584]	; (8000558 <__aeabi_ddiv+0x280>)
 800030e:	0f7b      	lsrs	r3, r7, #29
 8000310:	4333      	orrs	r3, r6
 8000312:	4699      	mov	r9, r3
 8000314:	4694      	mov	ip, r2
 8000316:	0003      	movs	r3, r0
 8000318:	4463      	add	r3, ip
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2300      	movs	r3, #0
 800031e:	2600      	movs	r6, #0
 8000320:	00ff      	lsls	r7, r7, #3
 8000322:	9302      	str	r3, [sp, #8]
 8000324:	0323      	lsls	r3, r4, #12
 8000326:	0b1b      	lsrs	r3, r3, #12
 8000328:	4698      	mov	r8, r3
 800032a:	0063      	lsls	r3, r4, #1
 800032c:	0fe4      	lsrs	r4, r4, #31
 800032e:	4652      	mov	r2, sl
 8000330:	0d5b      	lsrs	r3, r3, #21
 8000332:	9401      	str	r4, [sp, #4]
 8000334:	d100      	bne.n	8000338 <__aeabi_ddiv+0x60>
 8000336:	e0b3      	b.n	80004a0 <__aeabi_ddiv+0x1c8>
 8000338:	4986      	ldr	r1, [pc, #536]	; (8000554 <__aeabi_ddiv+0x27c>)
 800033a:	428b      	cmp	r3, r1
 800033c:	d100      	bne.n	8000340 <__aeabi_ddiv+0x68>
 800033e:	e09e      	b.n	800047e <__aeabi_ddiv+0x1a6>
 8000340:	4642      	mov	r2, r8
 8000342:	00d1      	lsls	r1, r2, #3
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	0412      	lsls	r2, r2, #16
 8000348:	430a      	orrs	r2, r1
 800034a:	4651      	mov	r1, sl
 800034c:	0f49      	lsrs	r1, r1, #29
 800034e:	4311      	orrs	r1, r2
 8000350:	468b      	mov	fp, r1
 8000352:	4981      	ldr	r1, [pc, #516]	; (8000558 <__aeabi_ddiv+0x280>)
 8000354:	4652      	mov	r2, sl
 8000356:	468c      	mov	ip, r1
 8000358:	9900      	ldr	r1, [sp, #0]
 800035a:	4463      	add	r3, ip
 800035c:	1acb      	subs	r3, r1, r3
 800035e:	2100      	movs	r1, #0
 8000360:	00d2      	lsls	r2, r2, #3
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	002b      	movs	r3, r5
 8000366:	4063      	eors	r3, r4
 8000368:	469a      	mov	sl, r3
 800036a:	2e0f      	cmp	r6, #15
 800036c:	d900      	bls.n	8000370 <__aeabi_ddiv+0x98>
 800036e:	e105      	b.n	800057c <__aeabi_ddiv+0x2a4>
 8000370:	4b7a      	ldr	r3, [pc, #488]	; (800055c <__aeabi_ddiv+0x284>)
 8000372:	00b6      	lsls	r6, r6, #2
 8000374:	599b      	ldr	r3, [r3, r6]
 8000376:	469f      	mov	pc, r3
 8000378:	465b      	mov	r3, fp
 800037a:	4333      	orrs	r3, r6
 800037c:	4699      	mov	r9, r3
 800037e:	d000      	beq.n	8000382 <__aeabi_ddiv+0xaa>
 8000380:	e0b8      	b.n	80004f4 <__aeabi_ddiv+0x21c>
 8000382:	2302      	movs	r3, #2
 8000384:	2608      	movs	r6, #8
 8000386:	2700      	movs	r7, #0
 8000388:	9000      	str	r0, [sp, #0]
 800038a:	9302      	str	r3, [sp, #8]
 800038c:	e7ca      	b.n	8000324 <__aeabi_ddiv+0x4c>
 800038e:	46cb      	mov	fp, r9
 8000390:	003a      	movs	r2, r7
 8000392:	9902      	ldr	r1, [sp, #8]
 8000394:	9501      	str	r5, [sp, #4]
 8000396:	9b01      	ldr	r3, [sp, #4]
 8000398:	469a      	mov	sl, r3
 800039a:	2902      	cmp	r1, #2
 800039c:	d027      	beq.n	80003ee <__aeabi_ddiv+0x116>
 800039e:	2903      	cmp	r1, #3
 80003a0:	d100      	bne.n	80003a4 <__aeabi_ddiv+0xcc>
 80003a2:	e280      	b.n	80008a6 <__aeabi_ddiv+0x5ce>
 80003a4:	2901      	cmp	r1, #1
 80003a6:	d044      	beq.n	8000432 <__aeabi_ddiv+0x15a>
 80003a8:	496d      	ldr	r1, [pc, #436]	; (8000560 <__aeabi_ddiv+0x288>)
 80003aa:	9b00      	ldr	r3, [sp, #0]
 80003ac:	468c      	mov	ip, r1
 80003ae:	4463      	add	r3, ip
 80003b0:	001c      	movs	r4, r3
 80003b2:	2c00      	cmp	r4, #0
 80003b4:	dd38      	ble.n	8000428 <__aeabi_ddiv+0x150>
 80003b6:	0753      	lsls	r3, r2, #29
 80003b8:	d000      	beq.n	80003bc <__aeabi_ddiv+0xe4>
 80003ba:	e213      	b.n	80007e4 <__aeabi_ddiv+0x50c>
 80003bc:	08d2      	lsrs	r2, r2, #3
 80003be:	465b      	mov	r3, fp
 80003c0:	01db      	lsls	r3, r3, #7
 80003c2:	d509      	bpl.n	80003d8 <__aeabi_ddiv+0x100>
 80003c4:	4659      	mov	r1, fp
 80003c6:	4b67      	ldr	r3, [pc, #412]	; (8000564 <__aeabi_ddiv+0x28c>)
 80003c8:	4019      	ands	r1, r3
 80003ca:	468b      	mov	fp, r1
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	00c9      	lsls	r1, r1, #3
 80003d0:	468c      	mov	ip, r1
 80003d2:	9b00      	ldr	r3, [sp, #0]
 80003d4:	4463      	add	r3, ip
 80003d6:	001c      	movs	r4, r3
 80003d8:	4b63      	ldr	r3, [pc, #396]	; (8000568 <__aeabi_ddiv+0x290>)
 80003da:	429c      	cmp	r4, r3
 80003dc:	dc07      	bgt.n	80003ee <__aeabi_ddiv+0x116>
 80003de:	465b      	mov	r3, fp
 80003e0:	0564      	lsls	r4, r4, #21
 80003e2:	075f      	lsls	r7, r3, #29
 80003e4:	025b      	lsls	r3, r3, #9
 80003e6:	4317      	orrs	r7, r2
 80003e8:	0b1b      	lsrs	r3, r3, #12
 80003ea:	0d62      	lsrs	r2, r4, #21
 80003ec:	e002      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 80003ee:	2300      	movs	r3, #0
 80003f0:	2700      	movs	r7, #0
 80003f2:	4a58      	ldr	r2, [pc, #352]	; (8000554 <__aeabi_ddiv+0x27c>)
 80003f4:	2100      	movs	r1, #0
 80003f6:	031b      	lsls	r3, r3, #12
 80003f8:	0b1c      	lsrs	r4, r3, #12
 80003fa:	0d0b      	lsrs	r3, r1, #20
 80003fc:	051b      	lsls	r3, r3, #20
 80003fe:	4323      	orrs	r3, r4
 8000400:	0514      	lsls	r4, r2, #20
 8000402:	4a5a      	ldr	r2, [pc, #360]	; (800056c <__aeabi_ddiv+0x294>)
 8000404:	0038      	movs	r0, r7
 8000406:	4013      	ands	r3, r2
 8000408:	431c      	orrs	r4, r3
 800040a:	4653      	mov	r3, sl
 800040c:	0064      	lsls	r4, r4, #1
 800040e:	07db      	lsls	r3, r3, #31
 8000410:	0864      	lsrs	r4, r4, #1
 8000412:	431c      	orrs	r4, r3
 8000414:	0021      	movs	r1, r4
 8000416:	b005      	add	sp, #20
 8000418:	bc3c      	pop	{r2, r3, r4, r5}
 800041a:	4690      	mov	r8, r2
 800041c:	4699      	mov	r9, r3
 800041e:	46a2      	mov	sl, r4
 8000420:	46ab      	mov	fp, r5
 8000422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000424:	2201      	movs	r2, #1
 8000426:	4252      	negs	r2, r2
 8000428:	2301      	movs	r3, #1
 800042a:	1b1b      	subs	r3, r3, r4
 800042c:	2b38      	cmp	r3, #56	; 0x38
 800042e:	dc00      	bgt.n	8000432 <__aeabi_ddiv+0x15a>
 8000430:	e1ad      	b.n	800078e <__aeabi_ddiv+0x4b6>
 8000432:	2200      	movs	r2, #0
 8000434:	2300      	movs	r3, #0
 8000436:	2700      	movs	r7, #0
 8000438:	e7dc      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 800043a:	465b      	mov	r3, fp
 800043c:	4333      	orrs	r3, r6
 800043e:	4699      	mov	r9, r3
 8000440:	d05e      	beq.n	8000500 <__aeabi_ddiv+0x228>
 8000442:	2e00      	cmp	r6, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_ddiv+0x170>
 8000446:	e18a      	b.n	800075e <__aeabi_ddiv+0x486>
 8000448:	0030      	movs	r0, r6
 800044a:	f000 ff07 	bl	800125c <__clzsi2>
 800044e:	0003      	movs	r3, r0
 8000450:	3b0b      	subs	r3, #11
 8000452:	2b1c      	cmp	r3, #28
 8000454:	dd00      	ble.n	8000458 <__aeabi_ddiv+0x180>
 8000456:	e17b      	b.n	8000750 <__aeabi_ddiv+0x478>
 8000458:	221d      	movs	r2, #29
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	465a      	mov	r2, fp
 800045e:	0001      	movs	r1, r0
 8000460:	40da      	lsrs	r2, r3
 8000462:	3908      	subs	r1, #8
 8000464:	408e      	lsls	r6, r1
 8000466:	0013      	movs	r3, r2
 8000468:	465f      	mov	r7, fp
 800046a:	4333      	orrs	r3, r6
 800046c:	4699      	mov	r9, r3
 800046e:	408f      	lsls	r7, r1
 8000470:	4b3f      	ldr	r3, [pc, #252]	; (8000570 <__aeabi_ddiv+0x298>)
 8000472:	2600      	movs	r6, #0
 8000474:	1a1b      	subs	r3, r3, r0
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	2300      	movs	r3, #0
 800047a:	9302      	str	r3, [sp, #8]
 800047c:	e752      	b.n	8000324 <__aeabi_ddiv+0x4c>
 800047e:	4641      	mov	r1, r8
 8000480:	4653      	mov	r3, sl
 8000482:	430b      	orrs	r3, r1
 8000484:	493b      	ldr	r1, [pc, #236]	; (8000574 <__aeabi_ddiv+0x29c>)
 8000486:	469b      	mov	fp, r3
 8000488:	468c      	mov	ip, r1
 800048a:	9b00      	ldr	r3, [sp, #0]
 800048c:	4463      	add	r3, ip
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	465b      	mov	r3, fp
 8000492:	2b00      	cmp	r3, #0
 8000494:	d13b      	bne.n	800050e <__aeabi_ddiv+0x236>
 8000496:	2302      	movs	r3, #2
 8000498:	2200      	movs	r2, #0
 800049a:	431e      	orrs	r6, r3
 800049c:	2102      	movs	r1, #2
 800049e:	e761      	b.n	8000364 <__aeabi_ddiv+0x8c>
 80004a0:	4643      	mov	r3, r8
 80004a2:	4313      	orrs	r3, r2
 80004a4:	469b      	mov	fp, r3
 80004a6:	d037      	beq.n	8000518 <__aeabi_ddiv+0x240>
 80004a8:	4643      	mov	r3, r8
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_ddiv+0x1d8>
 80004ae:	e162      	b.n	8000776 <__aeabi_ddiv+0x49e>
 80004b0:	4640      	mov	r0, r8
 80004b2:	f000 fed3 	bl	800125c <__clzsi2>
 80004b6:	0003      	movs	r3, r0
 80004b8:	3b0b      	subs	r3, #11
 80004ba:	2b1c      	cmp	r3, #28
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_ddiv+0x1e8>
 80004be:	e153      	b.n	8000768 <__aeabi_ddiv+0x490>
 80004c0:	0002      	movs	r2, r0
 80004c2:	4641      	mov	r1, r8
 80004c4:	3a08      	subs	r2, #8
 80004c6:	4091      	lsls	r1, r2
 80004c8:	4688      	mov	r8, r1
 80004ca:	211d      	movs	r1, #29
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	4651      	mov	r1, sl
 80004d0:	40d9      	lsrs	r1, r3
 80004d2:	000b      	movs	r3, r1
 80004d4:	4641      	mov	r1, r8
 80004d6:	430b      	orrs	r3, r1
 80004d8:	469b      	mov	fp, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001a      	movs	r2, r3
 80004e0:	9b00      	ldr	r3, [sp, #0]
 80004e2:	4925      	ldr	r1, [pc, #148]	; (8000578 <__aeabi_ddiv+0x2a0>)
 80004e4:	469c      	mov	ip, r3
 80004e6:	4460      	add	r0, ip
 80004e8:	0003      	movs	r3, r0
 80004ea:	468c      	mov	ip, r1
 80004ec:	4463      	add	r3, ip
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e737      	b.n	8000364 <__aeabi_ddiv+0x8c>
 80004f4:	2303      	movs	r3, #3
 80004f6:	46b1      	mov	r9, r6
 80004f8:	9000      	str	r0, [sp, #0]
 80004fa:	260c      	movs	r6, #12
 80004fc:	9302      	str	r3, [sp, #8]
 80004fe:	e711      	b.n	8000324 <__aeabi_ddiv+0x4c>
 8000500:	2300      	movs	r3, #0
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	2604      	movs	r6, #4
 8000508:	2700      	movs	r7, #0
 800050a:	9302      	str	r3, [sp, #8]
 800050c:	e70a      	b.n	8000324 <__aeabi_ddiv+0x4c>
 800050e:	2303      	movs	r3, #3
 8000510:	46c3      	mov	fp, r8
 8000512:	431e      	orrs	r6, r3
 8000514:	2103      	movs	r1, #3
 8000516:	e725      	b.n	8000364 <__aeabi_ddiv+0x8c>
 8000518:	3301      	adds	r3, #1
 800051a:	431e      	orrs	r6, r3
 800051c:	2200      	movs	r2, #0
 800051e:	2101      	movs	r1, #1
 8000520:	e720      	b.n	8000364 <__aeabi_ddiv+0x8c>
 8000522:	2300      	movs	r3, #0
 8000524:	469a      	mov	sl, r3
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	2700      	movs	r7, #0
 800052a:	031b      	lsls	r3, r3, #12
 800052c:	4a09      	ldr	r2, [pc, #36]	; (8000554 <__aeabi_ddiv+0x27c>)
 800052e:	e761      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	4649      	mov	r1, r9
 8000534:	031b      	lsls	r3, r3, #12
 8000536:	4219      	tst	r1, r3
 8000538:	d100      	bne.n	800053c <__aeabi_ddiv+0x264>
 800053a:	e0e2      	b.n	8000702 <__aeabi_ddiv+0x42a>
 800053c:	4659      	mov	r1, fp
 800053e:	4219      	tst	r1, r3
 8000540:	d000      	beq.n	8000544 <__aeabi_ddiv+0x26c>
 8000542:	e0de      	b.n	8000702 <__aeabi_ddiv+0x42a>
 8000544:	430b      	orrs	r3, r1
 8000546:	031b      	lsls	r3, r3, #12
 8000548:	0017      	movs	r7, r2
 800054a:	0b1b      	lsrs	r3, r3, #12
 800054c:	46a2      	mov	sl, r4
 800054e:	4a01      	ldr	r2, [pc, #4]	; (8000554 <__aeabi_ddiv+0x27c>)
 8000550:	e750      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	000007ff 	.word	0x000007ff
 8000558:	fffffc01 	.word	0xfffffc01
 800055c:	080037a4 	.word	0x080037a4
 8000560:	000003ff 	.word	0x000003ff
 8000564:	feffffff 	.word	0xfeffffff
 8000568:	000007fe 	.word	0x000007fe
 800056c:	800fffff 	.word	0x800fffff
 8000570:	fffffc0d 	.word	0xfffffc0d
 8000574:	fffff801 	.word	0xfffff801
 8000578:	000003f3 	.word	0x000003f3
 800057c:	45d9      	cmp	r9, fp
 800057e:	d900      	bls.n	8000582 <__aeabi_ddiv+0x2aa>
 8000580:	e0cb      	b.n	800071a <__aeabi_ddiv+0x442>
 8000582:	d100      	bne.n	8000586 <__aeabi_ddiv+0x2ae>
 8000584:	e0c6      	b.n	8000714 <__aeabi_ddiv+0x43c>
 8000586:	003c      	movs	r4, r7
 8000588:	4648      	mov	r0, r9
 800058a:	2700      	movs	r7, #0
 800058c:	9b00      	ldr	r3, [sp, #0]
 800058e:	3b01      	subs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	465b      	mov	r3, fp
 8000594:	0e16      	lsrs	r6, r2, #24
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	431e      	orrs	r6, r3
 800059a:	0213      	lsls	r3, r2, #8
 800059c:	4698      	mov	r8, r3
 800059e:	0433      	lsls	r3, r6, #16
 80005a0:	0c1b      	lsrs	r3, r3, #16
 80005a2:	4699      	mov	r9, r3
 80005a4:	0c31      	lsrs	r1, r6, #16
 80005a6:	9101      	str	r1, [sp, #4]
 80005a8:	f7ff fe34 	bl	8000214 <__aeabi_uidivmod>
 80005ac:	464a      	mov	r2, r9
 80005ae:	4342      	muls	r2, r0
 80005b0:	040b      	lsls	r3, r1, #16
 80005b2:	0c21      	lsrs	r1, r4, #16
 80005b4:	0005      	movs	r5, r0
 80005b6:	4319      	orrs	r1, r3
 80005b8:	428a      	cmp	r2, r1
 80005ba:	d907      	bls.n	80005cc <__aeabi_ddiv+0x2f4>
 80005bc:	1989      	adds	r1, r1, r6
 80005be:	3d01      	subs	r5, #1
 80005c0:	428e      	cmp	r6, r1
 80005c2:	d803      	bhi.n	80005cc <__aeabi_ddiv+0x2f4>
 80005c4:	428a      	cmp	r2, r1
 80005c6:	d901      	bls.n	80005cc <__aeabi_ddiv+0x2f4>
 80005c8:	1e85      	subs	r5, r0, #2
 80005ca:	1989      	adds	r1, r1, r6
 80005cc:	1a88      	subs	r0, r1, r2
 80005ce:	9901      	ldr	r1, [sp, #4]
 80005d0:	f7ff fe20 	bl	8000214 <__aeabi_uidivmod>
 80005d4:	0409      	lsls	r1, r1, #16
 80005d6:	468c      	mov	ip, r1
 80005d8:	464a      	mov	r2, r9
 80005da:	0421      	lsls	r1, r4, #16
 80005dc:	4664      	mov	r4, ip
 80005de:	4342      	muls	r2, r0
 80005e0:	0c09      	lsrs	r1, r1, #16
 80005e2:	0003      	movs	r3, r0
 80005e4:	4321      	orrs	r1, r4
 80005e6:	428a      	cmp	r2, r1
 80005e8:	d904      	bls.n	80005f4 <__aeabi_ddiv+0x31c>
 80005ea:	1989      	adds	r1, r1, r6
 80005ec:	3b01      	subs	r3, #1
 80005ee:	428e      	cmp	r6, r1
 80005f0:	d800      	bhi.n	80005f4 <__aeabi_ddiv+0x31c>
 80005f2:	e0f1      	b.n	80007d8 <__aeabi_ddiv+0x500>
 80005f4:	042d      	lsls	r5, r5, #16
 80005f6:	431d      	orrs	r5, r3
 80005f8:	46ab      	mov	fp, r5
 80005fa:	4643      	mov	r3, r8
 80005fc:	1a89      	subs	r1, r1, r2
 80005fe:	4642      	mov	r2, r8
 8000600:	0c28      	lsrs	r0, r5, #16
 8000602:	0412      	lsls	r2, r2, #16
 8000604:	0c1d      	lsrs	r5, r3, #16
 8000606:	465b      	mov	r3, fp
 8000608:	0c14      	lsrs	r4, r2, #16
 800060a:	0022      	movs	r2, r4
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	0c1b      	lsrs	r3, r3, #16
 8000610:	435a      	muls	r2, r3
 8000612:	9403      	str	r4, [sp, #12]
 8000614:	436b      	muls	r3, r5
 8000616:	4344      	muls	r4, r0
 8000618:	9502      	str	r5, [sp, #8]
 800061a:	4368      	muls	r0, r5
 800061c:	191b      	adds	r3, r3, r4
 800061e:	0c15      	lsrs	r5, r2, #16
 8000620:	18eb      	adds	r3, r5, r3
 8000622:	429c      	cmp	r4, r3
 8000624:	d903      	bls.n	800062e <__aeabi_ddiv+0x356>
 8000626:	2480      	movs	r4, #128	; 0x80
 8000628:	0264      	lsls	r4, r4, #9
 800062a:	46a4      	mov	ip, r4
 800062c:	4460      	add	r0, ip
 800062e:	0c1c      	lsrs	r4, r3, #16
 8000630:	0415      	lsls	r5, r2, #16
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	0c2d      	lsrs	r5, r5, #16
 8000636:	1820      	adds	r0, r4, r0
 8000638:	195d      	adds	r5, r3, r5
 800063a:	4281      	cmp	r1, r0
 800063c:	d377      	bcc.n	800072e <__aeabi_ddiv+0x456>
 800063e:	d073      	beq.n	8000728 <__aeabi_ddiv+0x450>
 8000640:	1a0c      	subs	r4, r1, r0
 8000642:	4aa2      	ldr	r2, [pc, #648]	; (80008cc <__aeabi_ddiv+0x5f4>)
 8000644:	1b7d      	subs	r5, r7, r5
 8000646:	42af      	cmp	r7, r5
 8000648:	41bf      	sbcs	r7, r7
 800064a:	4694      	mov	ip, r2
 800064c:	9b00      	ldr	r3, [sp, #0]
 800064e:	427f      	negs	r7, r7
 8000650:	4463      	add	r3, ip
 8000652:	1be0      	subs	r0, r4, r7
 8000654:	001c      	movs	r4, r3
 8000656:	4286      	cmp	r6, r0
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x384>
 800065a:	e0db      	b.n	8000814 <__aeabi_ddiv+0x53c>
 800065c:	9901      	ldr	r1, [sp, #4]
 800065e:	f7ff fdd9 	bl	8000214 <__aeabi_uidivmod>
 8000662:	464a      	mov	r2, r9
 8000664:	4342      	muls	r2, r0
 8000666:	040b      	lsls	r3, r1, #16
 8000668:	0c29      	lsrs	r1, r5, #16
 800066a:	0007      	movs	r7, r0
 800066c:	4319      	orrs	r1, r3
 800066e:	428a      	cmp	r2, r1
 8000670:	d907      	bls.n	8000682 <__aeabi_ddiv+0x3aa>
 8000672:	1989      	adds	r1, r1, r6
 8000674:	3f01      	subs	r7, #1
 8000676:	428e      	cmp	r6, r1
 8000678:	d803      	bhi.n	8000682 <__aeabi_ddiv+0x3aa>
 800067a:	428a      	cmp	r2, r1
 800067c:	d901      	bls.n	8000682 <__aeabi_ddiv+0x3aa>
 800067e:	1e87      	subs	r7, r0, #2
 8000680:	1989      	adds	r1, r1, r6
 8000682:	1a88      	subs	r0, r1, r2
 8000684:	9901      	ldr	r1, [sp, #4]
 8000686:	f7ff fdc5 	bl	8000214 <__aeabi_uidivmod>
 800068a:	0409      	lsls	r1, r1, #16
 800068c:	464a      	mov	r2, r9
 800068e:	4689      	mov	r9, r1
 8000690:	0429      	lsls	r1, r5, #16
 8000692:	464d      	mov	r5, r9
 8000694:	4342      	muls	r2, r0
 8000696:	0c09      	lsrs	r1, r1, #16
 8000698:	0003      	movs	r3, r0
 800069a:	4329      	orrs	r1, r5
 800069c:	428a      	cmp	r2, r1
 800069e:	d907      	bls.n	80006b0 <__aeabi_ddiv+0x3d8>
 80006a0:	1989      	adds	r1, r1, r6
 80006a2:	3b01      	subs	r3, #1
 80006a4:	428e      	cmp	r6, r1
 80006a6:	d803      	bhi.n	80006b0 <__aeabi_ddiv+0x3d8>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	d901      	bls.n	80006b0 <__aeabi_ddiv+0x3d8>
 80006ac:	1e83      	subs	r3, r0, #2
 80006ae:	1989      	adds	r1, r1, r6
 80006b0:	043f      	lsls	r7, r7, #16
 80006b2:	1a89      	subs	r1, r1, r2
 80006b4:	003a      	movs	r2, r7
 80006b6:	9f03      	ldr	r7, [sp, #12]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	0038      	movs	r0, r7
 80006bc:	0413      	lsls	r3, r2, #16
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	4358      	muls	r0, r3
 80006c2:	4681      	mov	r9, r0
 80006c4:	9802      	ldr	r0, [sp, #8]
 80006c6:	0c15      	lsrs	r5, r2, #16
 80006c8:	436f      	muls	r7, r5
 80006ca:	4343      	muls	r3, r0
 80006cc:	4345      	muls	r5, r0
 80006ce:	4648      	mov	r0, r9
 80006d0:	0c00      	lsrs	r0, r0, #16
 80006d2:	4684      	mov	ip, r0
 80006d4:	19db      	adds	r3, r3, r7
 80006d6:	4463      	add	r3, ip
 80006d8:	429f      	cmp	r7, r3
 80006da:	d903      	bls.n	80006e4 <__aeabi_ddiv+0x40c>
 80006dc:	2080      	movs	r0, #128	; 0x80
 80006de:	0240      	lsls	r0, r0, #9
 80006e0:	4684      	mov	ip, r0
 80006e2:	4465      	add	r5, ip
 80006e4:	4648      	mov	r0, r9
 80006e6:	0c1f      	lsrs	r7, r3, #16
 80006e8:	0400      	lsls	r0, r0, #16
 80006ea:	041b      	lsls	r3, r3, #16
 80006ec:	0c00      	lsrs	r0, r0, #16
 80006ee:	197d      	adds	r5, r7, r5
 80006f0:	1818      	adds	r0, r3, r0
 80006f2:	42a9      	cmp	r1, r5
 80006f4:	d200      	bcs.n	80006f8 <__aeabi_ddiv+0x420>
 80006f6:	e084      	b.n	8000802 <__aeabi_ddiv+0x52a>
 80006f8:	d100      	bne.n	80006fc <__aeabi_ddiv+0x424>
 80006fa:	e07f      	b.n	80007fc <__aeabi_ddiv+0x524>
 80006fc:	2301      	movs	r3, #1
 80006fe:	431a      	orrs	r2, r3
 8000700:	e657      	b.n	80003b2 <__aeabi_ddiv+0xda>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	464a      	mov	r2, r9
 8000706:	031b      	lsls	r3, r3, #12
 8000708:	4313      	orrs	r3, r2
 800070a:	031b      	lsls	r3, r3, #12
 800070c:	0b1b      	lsrs	r3, r3, #12
 800070e:	46aa      	mov	sl, r5
 8000710:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <__aeabi_ddiv+0x5f8>)
 8000712:	e66f      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 8000714:	42ba      	cmp	r2, r7
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x442>
 8000718:	e735      	b.n	8000586 <__aeabi_ddiv+0x2ae>
 800071a:	464b      	mov	r3, r9
 800071c:	07dc      	lsls	r4, r3, #31
 800071e:	0858      	lsrs	r0, r3, #1
 8000720:	087b      	lsrs	r3, r7, #1
 8000722:	431c      	orrs	r4, r3
 8000724:	07ff      	lsls	r7, r7, #31
 8000726:	e734      	b.n	8000592 <__aeabi_ddiv+0x2ba>
 8000728:	2400      	movs	r4, #0
 800072a:	42af      	cmp	r7, r5
 800072c:	d289      	bcs.n	8000642 <__aeabi_ddiv+0x36a>
 800072e:	4447      	add	r7, r8
 8000730:	4547      	cmp	r7, r8
 8000732:	41a4      	sbcs	r4, r4
 8000734:	465b      	mov	r3, fp
 8000736:	4264      	negs	r4, r4
 8000738:	19a4      	adds	r4, r4, r6
 800073a:	1864      	adds	r4, r4, r1
 800073c:	3b01      	subs	r3, #1
 800073e:	42a6      	cmp	r6, r4
 8000740:	d21e      	bcs.n	8000780 <__aeabi_ddiv+0x4a8>
 8000742:	42a0      	cmp	r0, r4
 8000744:	d86d      	bhi.n	8000822 <__aeabi_ddiv+0x54a>
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x472>
 8000748:	e0b6      	b.n	80008b8 <__aeabi_ddiv+0x5e0>
 800074a:	1a24      	subs	r4, r4, r0
 800074c:	469b      	mov	fp, r3
 800074e:	e778      	b.n	8000642 <__aeabi_ddiv+0x36a>
 8000750:	0003      	movs	r3, r0
 8000752:	465a      	mov	r2, fp
 8000754:	3b28      	subs	r3, #40	; 0x28
 8000756:	409a      	lsls	r2, r3
 8000758:	2700      	movs	r7, #0
 800075a:	4691      	mov	r9, r2
 800075c:	e688      	b.n	8000470 <__aeabi_ddiv+0x198>
 800075e:	4658      	mov	r0, fp
 8000760:	f000 fd7c 	bl	800125c <__clzsi2>
 8000764:	3020      	adds	r0, #32
 8000766:	e672      	b.n	800044e <__aeabi_ddiv+0x176>
 8000768:	0003      	movs	r3, r0
 800076a:	4652      	mov	r2, sl
 800076c:	3b28      	subs	r3, #40	; 0x28
 800076e:	409a      	lsls	r2, r3
 8000770:	4693      	mov	fp, r2
 8000772:	2200      	movs	r2, #0
 8000774:	e6b4      	b.n	80004e0 <__aeabi_ddiv+0x208>
 8000776:	4650      	mov	r0, sl
 8000778:	f000 fd70 	bl	800125c <__clzsi2>
 800077c:	3020      	adds	r0, #32
 800077e:	e69a      	b.n	80004b6 <__aeabi_ddiv+0x1de>
 8000780:	42a6      	cmp	r6, r4
 8000782:	d1e2      	bne.n	800074a <__aeabi_ddiv+0x472>
 8000784:	45b8      	cmp	r8, r7
 8000786:	d9dc      	bls.n	8000742 <__aeabi_ddiv+0x46a>
 8000788:	1a34      	subs	r4, r6, r0
 800078a:	469b      	mov	fp, r3
 800078c:	e759      	b.n	8000642 <__aeabi_ddiv+0x36a>
 800078e:	2b1f      	cmp	r3, #31
 8000790:	dc65      	bgt.n	800085e <__aeabi_ddiv+0x586>
 8000792:	4c50      	ldr	r4, [pc, #320]	; (80008d4 <__aeabi_ddiv+0x5fc>)
 8000794:	9900      	ldr	r1, [sp, #0]
 8000796:	46a4      	mov	ip, r4
 8000798:	465c      	mov	r4, fp
 800079a:	4461      	add	r1, ip
 800079c:	0008      	movs	r0, r1
 800079e:	408c      	lsls	r4, r1
 80007a0:	0011      	movs	r1, r2
 80007a2:	4082      	lsls	r2, r0
 80007a4:	40d9      	lsrs	r1, r3
 80007a6:	1e50      	subs	r0, r2, #1
 80007a8:	4182      	sbcs	r2, r0
 80007aa:	430c      	orrs	r4, r1
 80007ac:	4314      	orrs	r4, r2
 80007ae:	465a      	mov	r2, fp
 80007b0:	40da      	lsrs	r2, r3
 80007b2:	0013      	movs	r3, r2
 80007b4:	0762      	lsls	r2, r4, #29
 80007b6:	d009      	beq.n	80007cc <__aeabi_ddiv+0x4f4>
 80007b8:	220f      	movs	r2, #15
 80007ba:	4022      	ands	r2, r4
 80007bc:	2a04      	cmp	r2, #4
 80007be:	d005      	beq.n	80007cc <__aeabi_ddiv+0x4f4>
 80007c0:	0022      	movs	r2, r4
 80007c2:	1d14      	adds	r4, r2, #4
 80007c4:	4294      	cmp	r4, r2
 80007c6:	4189      	sbcs	r1, r1
 80007c8:	4249      	negs	r1, r1
 80007ca:	185b      	adds	r3, r3, r1
 80007cc:	021a      	lsls	r2, r3, #8
 80007ce:	d562      	bpl.n	8000896 <__aeabi_ddiv+0x5be>
 80007d0:	2201      	movs	r2, #1
 80007d2:	2300      	movs	r3, #0
 80007d4:	2700      	movs	r7, #0
 80007d6:	e60d      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 80007d8:	428a      	cmp	r2, r1
 80007da:	d800      	bhi.n	80007de <__aeabi_ddiv+0x506>
 80007dc:	e70a      	b.n	80005f4 <__aeabi_ddiv+0x31c>
 80007de:	1e83      	subs	r3, r0, #2
 80007e0:	1989      	adds	r1, r1, r6
 80007e2:	e707      	b.n	80005f4 <__aeabi_ddiv+0x31c>
 80007e4:	230f      	movs	r3, #15
 80007e6:	4013      	ands	r3, r2
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d100      	bne.n	80007ee <__aeabi_ddiv+0x516>
 80007ec:	e5e6      	b.n	80003bc <__aeabi_ddiv+0xe4>
 80007ee:	1d17      	adds	r7, r2, #4
 80007f0:	4297      	cmp	r7, r2
 80007f2:	4192      	sbcs	r2, r2
 80007f4:	4253      	negs	r3, r2
 80007f6:	449b      	add	fp, r3
 80007f8:	08fa      	lsrs	r2, r7, #3
 80007fa:	e5e0      	b.n	80003be <__aeabi_ddiv+0xe6>
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_ddiv+0x52a>
 8000800:	e5d7      	b.n	80003b2 <__aeabi_ddiv+0xda>
 8000802:	1871      	adds	r1, r6, r1
 8000804:	1e53      	subs	r3, r2, #1
 8000806:	42b1      	cmp	r1, r6
 8000808:	d327      	bcc.n	800085a <__aeabi_ddiv+0x582>
 800080a:	42a9      	cmp	r1, r5
 800080c:	d315      	bcc.n	800083a <__aeabi_ddiv+0x562>
 800080e:	d058      	beq.n	80008c2 <__aeabi_ddiv+0x5ea>
 8000810:	001a      	movs	r2, r3
 8000812:	e773      	b.n	80006fc <__aeabi_ddiv+0x424>
 8000814:	2b00      	cmp	r3, #0
 8000816:	dc00      	bgt.n	800081a <__aeabi_ddiv+0x542>
 8000818:	e604      	b.n	8000424 <__aeabi_ddiv+0x14c>
 800081a:	2301      	movs	r3, #1
 800081c:	2200      	movs	r2, #0
 800081e:	449b      	add	fp, r3
 8000820:	e5cd      	b.n	80003be <__aeabi_ddiv+0xe6>
 8000822:	2302      	movs	r3, #2
 8000824:	4447      	add	r7, r8
 8000826:	4547      	cmp	r7, r8
 8000828:	4189      	sbcs	r1, r1
 800082a:	425b      	negs	r3, r3
 800082c:	469c      	mov	ip, r3
 800082e:	4249      	negs	r1, r1
 8000830:	1989      	adds	r1, r1, r6
 8000832:	190c      	adds	r4, r1, r4
 8000834:	44e3      	add	fp, ip
 8000836:	1a24      	subs	r4, r4, r0
 8000838:	e703      	b.n	8000642 <__aeabi_ddiv+0x36a>
 800083a:	4643      	mov	r3, r8
 800083c:	005f      	lsls	r7, r3, #1
 800083e:	4547      	cmp	r7, r8
 8000840:	419b      	sbcs	r3, r3
 8000842:	46b8      	mov	r8, r7
 8000844:	425b      	negs	r3, r3
 8000846:	199e      	adds	r6, r3, r6
 8000848:	3a02      	subs	r2, #2
 800084a:	1989      	adds	r1, r1, r6
 800084c:	42a9      	cmp	r1, r5
 800084e:	d000      	beq.n	8000852 <__aeabi_ddiv+0x57a>
 8000850:	e754      	b.n	80006fc <__aeabi_ddiv+0x424>
 8000852:	4540      	cmp	r0, r8
 8000854:	d000      	beq.n	8000858 <__aeabi_ddiv+0x580>
 8000856:	e751      	b.n	80006fc <__aeabi_ddiv+0x424>
 8000858:	e5ab      	b.n	80003b2 <__aeabi_ddiv+0xda>
 800085a:	001a      	movs	r2, r3
 800085c:	e7f6      	b.n	800084c <__aeabi_ddiv+0x574>
 800085e:	211f      	movs	r1, #31
 8000860:	465f      	mov	r7, fp
 8000862:	4249      	negs	r1, r1
 8000864:	1b0c      	subs	r4, r1, r4
 8000866:	40e7      	lsrs	r7, r4
 8000868:	2b20      	cmp	r3, #32
 800086a:	d007      	beq.n	800087c <__aeabi_ddiv+0x5a4>
 800086c:	491a      	ldr	r1, [pc, #104]	; (80008d8 <__aeabi_ddiv+0x600>)
 800086e:	9b00      	ldr	r3, [sp, #0]
 8000870:	468c      	mov	ip, r1
 8000872:	4463      	add	r3, ip
 8000874:	0018      	movs	r0, r3
 8000876:	465b      	mov	r3, fp
 8000878:	4083      	lsls	r3, r0
 800087a:	431a      	orrs	r2, r3
 800087c:	1e50      	subs	r0, r2, #1
 800087e:	4182      	sbcs	r2, r0
 8000880:	433a      	orrs	r2, r7
 8000882:	2707      	movs	r7, #7
 8000884:	2300      	movs	r3, #0
 8000886:	4017      	ands	r7, r2
 8000888:	d009      	beq.n	800089e <__aeabi_ddiv+0x5c6>
 800088a:	210f      	movs	r1, #15
 800088c:	2300      	movs	r3, #0
 800088e:	4011      	ands	r1, r2
 8000890:	0014      	movs	r4, r2
 8000892:	2904      	cmp	r1, #4
 8000894:	d195      	bne.n	80007c2 <__aeabi_ddiv+0x4ea>
 8000896:	0022      	movs	r2, r4
 8000898:	075f      	lsls	r7, r3, #29
 800089a:	025b      	lsls	r3, r3, #9
 800089c:	0b1b      	lsrs	r3, r3, #12
 800089e:	08d2      	lsrs	r2, r2, #3
 80008a0:	4317      	orrs	r7, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	e5a6      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	4659      	mov	r1, fp
 80008aa:	031b      	lsls	r3, r3, #12
 80008ac:	430b      	orrs	r3, r1
 80008ae:	031b      	lsls	r3, r3, #12
 80008b0:	0017      	movs	r7, r2
 80008b2:	0b1b      	lsrs	r3, r3, #12
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <__aeabi_ddiv+0x5f8>)
 80008b6:	e59d      	b.n	80003f4 <__aeabi_ddiv+0x11c>
 80008b8:	42bd      	cmp	r5, r7
 80008ba:	d8b2      	bhi.n	8000822 <__aeabi_ddiv+0x54a>
 80008bc:	469b      	mov	fp, r3
 80008be:	2400      	movs	r4, #0
 80008c0:	e6bf      	b.n	8000642 <__aeabi_ddiv+0x36a>
 80008c2:	4580      	cmp	r8, r0
 80008c4:	d3b9      	bcc.n	800083a <__aeabi_ddiv+0x562>
 80008c6:	001a      	movs	r2, r3
 80008c8:	e7c3      	b.n	8000852 <__aeabi_ddiv+0x57a>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	000003ff 	.word	0x000003ff
 80008d0:	000007ff 	.word	0x000007ff
 80008d4:	0000041e 	.word	0x0000041e
 80008d8:	0000043e 	.word	0x0000043e

080008dc <__eqdf2>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	464f      	mov	r7, r9
 80008e0:	4646      	mov	r6, r8
 80008e2:	46d6      	mov	lr, sl
 80008e4:	4684      	mov	ip, r0
 80008e6:	b5c0      	push	{r6, r7, lr}
 80008e8:	4680      	mov	r8, r0
 80008ea:	4e19      	ldr	r6, [pc, #100]	; (8000950 <__eqdf2+0x74>)
 80008ec:	0318      	lsls	r0, r3, #12
 80008ee:	030f      	lsls	r7, r1, #12
 80008f0:	004d      	lsls	r5, r1, #1
 80008f2:	0b00      	lsrs	r0, r0, #12
 80008f4:	005c      	lsls	r4, r3, #1
 80008f6:	4682      	mov	sl, r0
 80008f8:	0b3f      	lsrs	r7, r7, #12
 80008fa:	0d6d      	lsrs	r5, r5, #21
 80008fc:	0fc9      	lsrs	r1, r1, #31
 80008fe:	4691      	mov	r9, r2
 8000900:	0d64      	lsrs	r4, r4, #21
 8000902:	0fdb      	lsrs	r3, r3, #31
 8000904:	2001      	movs	r0, #1
 8000906:	42b5      	cmp	r5, r6
 8000908:	d00a      	beq.n	8000920 <__eqdf2+0x44>
 800090a:	42b4      	cmp	r4, r6
 800090c:	d003      	beq.n	8000916 <__eqdf2+0x3a>
 800090e:	42a5      	cmp	r5, r4
 8000910:	d101      	bne.n	8000916 <__eqdf2+0x3a>
 8000912:	4557      	cmp	r7, sl
 8000914:	d00c      	beq.n	8000930 <__eqdf2+0x54>
 8000916:	bc1c      	pop	{r2, r3, r4}
 8000918:	4690      	mov	r8, r2
 800091a:	4699      	mov	r9, r3
 800091c:	46a2      	mov	sl, r4
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000920:	4666      	mov	r6, ip
 8000922:	433e      	orrs	r6, r7
 8000924:	d1f7      	bne.n	8000916 <__eqdf2+0x3a>
 8000926:	42ac      	cmp	r4, r5
 8000928:	d1f5      	bne.n	8000916 <__eqdf2+0x3a>
 800092a:	4654      	mov	r4, sl
 800092c:	4314      	orrs	r4, r2
 800092e:	d1f2      	bne.n	8000916 <__eqdf2+0x3a>
 8000930:	2001      	movs	r0, #1
 8000932:	45c8      	cmp	r8, r9
 8000934:	d1ef      	bne.n	8000916 <__eqdf2+0x3a>
 8000936:	4299      	cmp	r1, r3
 8000938:	d007      	beq.n	800094a <__eqdf2+0x6e>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d1eb      	bne.n	8000916 <__eqdf2+0x3a>
 800093e:	4663      	mov	r3, ip
 8000940:	431f      	orrs	r7, r3
 8000942:	0038      	movs	r0, r7
 8000944:	1e47      	subs	r7, r0, #1
 8000946:	41b8      	sbcs	r0, r7
 8000948:	e7e5      	b.n	8000916 <__eqdf2+0x3a>
 800094a:	2000      	movs	r0, #0
 800094c:	e7e3      	b.n	8000916 <__eqdf2+0x3a>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	000007ff 	.word	0x000007ff

08000954 <__gedf2>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	464f      	mov	r7, r9
 8000958:	4646      	mov	r6, r8
 800095a:	46d6      	mov	lr, sl
 800095c:	004d      	lsls	r5, r1, #1
 800095e:	b5c0      	push	{r6, r7, lr}
 8000960:	030e      	lsls	r6, r1, #12
 8000962:	0fc9      	lsrs	r1, r1, #31
 8000964:	468a      	mov	sl, r1
 8000966:	492c      	ldr	r1, [pc, #176]	; (8000a18 <__gedf2+0xc4>)
 8000968:	031f      	lsls	r7, r3, #12
 800096a:	005c      	lsls	r4, r3, #1
 800096c:	4680      	mov	r8, r0
 800096e:	0b36      	lsrs	r6, r6, #12
 8000970:	0d6d      	lsrs	r5, r5, #21
 8000972:	4691      	mov	r9, r2
 8000974:	0b3f      	lsrs	r7, r7, #12
 8000976:	0d64      	lsrs	r4, r4, #21
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	428d      	cmp	r5, r1
 800097c:	d01e      	beq.n	80009bc <__gedf2+0x68>
 800097e:	428c      	cmp	r4, r1
 8000980:	d016      	beq.n	80009b0 <__gedf2+0x5c>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d11e      	bne.n	80009c4 <__gedf2+0x70>
 8000986:	4330      	orrs	r0, r6
 8000988:	4684      	mov	ip, r0
 800098a:	2c00      	cmp	r4, #0
 800098c:	d101      	bne.n	8000992 <__gedf2+0x3e>
 800098e:	433a      	orrs	r2, r7
 8000990:	d023      	beq.n	80009da <__gedf2+0x86>
 8000992:	4662      	mov	r2, ip
 8000994:	2a00      	cmp	r2, #0
 8000996:	d01a      	beq.n	80009ce <__gedf2+0x7a>
 8000998:	459a      	cmp	sl, r3
 800099a:	d029      	beq.n	80009f0 <__gedf2+0x9c>
 800099c:	4651      	mov	r1, sl
 800099e:	2002      	movs	r0, #2
 80009a0:	3901      	subs	r1, #1
 80009a2:	4008      	ands	r0, r1
 80009a4:	3801      	subs	r0, #1
 80009a6:	bc1c      	pop	{r2, r3, r4}
 80009a8:	4690      	mov	r8, r2
 80009aa:	4699      	mov	r9, r3
 80009ac:	46a2      	mov	sl, r4
 80009ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b0:	0039      	movs	r1, r7
 80009b2:	4311      	orrs	r1, r2
 80009b4:	d0e5      	beq.n	8000982 <__gedf2+0x2e>
 80009b6:	2002      	movs	r0, #2
 80009b8:	4240      	negs	r0, r0
 80009ba:	e7f4      	b.n	80009a6 <__gedf2+0x52>
 80009bc:	4330      	orrs	r0, r6
 80009be:	d1fa      	bne.n	80009b6 <__gedf2+0x62>
 80009c0:	42ac      	cmp	r4, r5
 80009c2:	d00f      	beq.n	80009e4 <__gedf2+0x90>
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	d10f      	bne.n	80009e8 <__gedf2+0x94>
 80009c8:	433a      	orrs	r2, r7
 80009ca:	d0e7      	beq.n	800099c <__gedf2+0x48>
 80009cc:	e00c      	b.n	80009e8 <__gedf2+0x94>
 80009ce:	2201      	movs	r2, #1
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4393      	bics	r3, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	3001      	adds	r0, #1
 80009d8:	e7e5      	b.n	80009a6 <__gedf2+0x52>
 80009da:	4663      	mov	r3, ip
 80009dc:	2000      	movs	r0, #0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0e1      	beq.n	80009a6 <__gedf2+0x52>
 80009e2:	e7db      	b.n	800099c <__gedf2+0x48>
 80009e4:	433a      	orrs	r2, r7
 80009e6:	d1e6      	bne.n	80009b6 <__gedf2+0x62>
 80009e8:	459a      	cmp	sl, r3
 80009ea:	d1d7      	bne.n	800099c <__gedf2+0x48>
 80009ec:	42a5      	cmp	r5, r4
 80009ee:	dcd5      	bgt.n	800099c <__gedf2+0x48>
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	db05      	blt.n	8000a00 <__gedf2+0xac>
 80009f4:	42be      	cmp	r6, r7
 80009f6:	d8d1      	bhi.n	800099c <__gedf2+0x48>
 80009f8:	d008      	beq.n	8000a0c <__gedf2+0xb8>
 80009fa:	2000      	movs	r0, #0
 80009fc:	42be      	cmp	r6, r7
 80009fe:	d2d2      	bcs.n	80009a6 <__gedf2+0x52>
 8000a00:	4650      	mov	r0, sl
 8000a02:	2301      	movs	r3, #1
 8000a04:	3801      	subs	r0, #1
 8000a06:	4398      	bics	r0, r3
 8000a08:	3001      	adds	r0, #1
 8000a0a:	e7cc      	b.n	80009a6 <__gedf2+0x52>
 8000a0c:	45c8      	cmp	r8, r9
 8000a0e:	d8c5      	bhi.n	800099c <__gedf2+0x48>
 8000a10:	2000      	movs	r0, #0
 8000a12:	45c8      	cmp	r8, r9
 8000a14:	d3f4      	bcc.n	8000a00 <__gedf2+0xac>
 8000a16:	e7c6      	b.n	80009a6 <__gedf2+0x52>
 8000a18:	000007ff 	.word	0x000007ff

08000a1c <__ledf2>:
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	464f      	mov	r7, r9
 8000a20:	4646      	mov	r6, r8
 8000a22:	46d6      	mov	lr, sl
 8000a24:	004d      	lsls	r5, r1, #1
 8000a26:	b5c0      	push	{r6, r7, lr}
 8000a28:	030e      	lsls	r6, r1, #12
 8000a2a:	0fc9      	lsrs	r1, r1, #31
 8000a2c:	468a      	mov	sl, r1
 8000a2e:	492e      	ldr	r1, [pc, #184]	; (8000ae8 <__ledf2+0xcc>)
 8000a30:	031f      	lsls	r7, r3, #12
 8000a32:	005c      	lsls	r4, r3, #1
 8000a34:	4680      	mov	r8, r0
 8000a36:	0b36      	lsrs	r6, r6, #12
 8000a38:	0d6d      	lsrs	r5, r5, #21
 8000a3a:	4691      	mov	r9, r2
 8000a3c:	0b3f      	lsrs	r7, r7, #12
 8000a3e:	0d64      	lsrs	r4, r4, #21
 8000a40:	0fdb      	lsrs	r3, r3, #31
 8000a42:	428d      	cmp	r5, r1
 8000a44:	d018      	beq.n	8000a78 <__ledf2+0x5c>
 8000a46:	428c      	cmp	r4, r1
 8000a48:	d011      	beq.n	8000a6e <__ledf2+0x52>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d118      	bne.n	8000a80 <__ledf2+0x64>
 8000a4e:	4330      	orrs	r0, r6
 8000a50:	4684      	mov	ip, r0
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	d11e      	bne.n	8000a94 <__ledf2+0x78>
 8000a56:	433a      	orrs	r2, r7
 8000a58:	d11c      	bne.n	8000a94 <__ledf2+0x78>
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d030      	beq.n	8000ac4 <__ledf2+0xa8>
 8000a62:	4651      	mov	r1, sl
 8000a64:	2002      	movs	r0, #2
 8000a66:	3901      	subs	r1, #1
 8000a68:	4008      	ands	r0, r1
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e02a      	b.n	8000ac4 <__ledf2+0xa8>
 8000a6e:	0039      	movs	r1, r7
 8000a70:	4311      	orrs	r1, r2
 8000a72:	d0ea      	beq.n	8000a4a <__ledf2+0x2e>
 8000a74:	2002      	movs	r0, #2
 8000a76:	e025      	b.n	8000ac4 <__ledf2+0xa8>
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	d1fb      	bne.n	8000a74 <__ledf2+0x58>
 8000a7c:	42ac      	cmp	r4, r5
 8000a7e:	d026      	beq.n	8000ace <__ledf2+0xb2>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d126      	bne.n	8000ad2 <__ledf2+0xb6>
 8000a84:	433a      	orrs	r2, r7
 8000a86:	d124      	bne.n	8000ad2 <__ledf2+0xb6>
 8000a88:	4651      	mov	r1, sl
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	3901      	subs	r1, #1
 8000a8e:	4008      	ands	r0, r1
 8000a90:	3801      	subs	r0, #1
 8000a92:	e017      	b.n	8000ac4 <__ledf2+0xa8>
 8000a94:	4662      	mov	r2, ip
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d00f      	beq.n	8000aba <__ledf2+0x9e>
 8000a9a:	459a      	cmp	sl, r3
 8000a9c:	d1e1      	bne.n	8000a62 <__ledf2+0x46>
 8000a9e:	42a5      	cmp	r5, r4
 8000aa0:	db05      	blt.n	8000aae <__ledf2+0x92>
 8000aa2:	42be      	cmp	r6, r7
 8000aa4:	d8dd      	bhi.n	8000a62 <__ledf2+0x46>
 8000aa6:	d019      	beq.n	8000adc <__ledf2+0xc0>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	42be      	cmp	r6, r7
 8000aac:	d20a      	bcs.n	8000ac4 <__ledf2+0xa8>
 8000aae:	4650      	mov	r0, sl
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	3801      	subs	r0, #1
 8000ab4:	4398      	bics	r0, r3
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	e004      	b.n	8000ac4 <__ledf2+0xa8>
 8000aba:	2201      	movs	r2, #1
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4393      	bics	r3, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	3001      	adds	r0, #1
 8000ac4:	bc1c      	pop	{r2, r3, r4}
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	4699      	mov	r9, r3
 8000aca:	46a2      	mov	sl, r4
 8000acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ace:	433a      	orrs	r2, r7
 8000ad0:	d1d0      	bne.n	8000a74 <__ledf2+0x58>
 8000ad2:	459a      	cmp	sl, r3
 8000ad4:	d1c5      	bne.n	8000a62 <__ledf2+0x46>
 8000ad6:	42a5      	cmp	r5, r4
 8000ad8:	dcc3      	bgt.n	8000a62 <__ledf2+0x46>
 8000ada:	e7e0      	b.n	8000a9e <__ledf2+0x82>
 8000adc:	45c8      	cmp	r8, r9
 8000ade:	d8c0      	bhi.n	8000a62 <__ledf2+0x46>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	45c8      	cmp	r8, r9
 8000ae4:	d3e3      	bcc.n	8000aae <__ledf2+0x92>
 8000ae6:	e7ed      	b.n	8000ac4 <__ledf2+0xa8>
 8000ae8:	000007ff 	.word	0x000007ff

08000aec <__aeabi_dsub>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	4657      	mov	r7, sl
 8000af0:	464e      	mov	r6, r9
 8000af2:	4645      	mov	r5, r8
 8000af4:	46de      	mov	lr, fp
 8000af6:	000c      	movs	r4, r1
 8000af8:	0309      	lsls	r1, r1, #12
 8000afa:	b5e0      	push	{r5, r6, r7, lr}
 8000afc:	0a49      	lsrs	r1, r1, #9
 8000afe:	0f46      	lsrs	r6, r0, #29
 8000b00:	005f      	lsls	r7, r3, #1
 8000b02:	4331      	orrs	r1, r6
 8000b04:	031e      	lsls	r6, r3, #12
 8000b06:	0fdb      	lsrs	r3, r3, #31
 8000b08:	0a76      	lsrs	r6, r6, #9
 8000b0a:	469b      	mov	fp, r3
 8000b0c:	0f53      	lsrs	r3, r2, #29
 8000b0e:	4333      	orrs	r3, r6
 8000b10:	4ec8      	ldr	r6, [pc, #800]	; (8000e34 <__aeabi_dsub+0x348>)
 8000b12:	0065      	lsls	r5, r4, #1
 8000b14:	00c0      	lsls	r0, r0, #3
 8000b16:	0fe4      	lsrs	r4, r4, #31
 8000b18:	00d2      	lsls	r2, r2, #3
 8000b1a:	0d6d      	lsrs	r5, r5, #21
 8000b1c:	46a2      	mov	sl, r4
 8000b1e:	4681      	mov	r9, r0
 8000b20:	0d7f      	lsrs	r7, r7, #21
 8000b22:	469c      	mov	ip, r3
 8000b24:	4690      	mov	r8, r2
 8000b26:	42b7      	cmp	r7, r6
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dsub+0x40>
 8000b2a:	e0b9      	b.n	8000ca0 <__aeabi_dsub+0x1b4>
 8000b2c:	465b      	mov	r3, fp
 8000b2e:	2601      	movs	r6, #1
 8000b30:	4073      	eors	r3, r6
 8000b32:	469b      	mov	fp, r3
 8000b34:	1bee      	subs	r6, r5, r7
 8000b36:	45a3      	cmp	fp, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dsub+0x50>
 8000b3a:	e083      	b.n	8000c44 <__aeabi_dsub+0x158>
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	dd63      	ble.n	8000c08 <__aeabi_dsub+0x11c>
 8000b40:	2f00      	cmp	r7, #0
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dsub+0x5a>
 8000b44:	e0b1      	b.n	8000caa <__aeabi_dsub+0x1be>
 8000b46:	4663      	mov	r3, ip
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dsub+0x62>
 8000b4c:	e123      	b.n	8000d96 <__aeabi_dsub+0x2aa>
 8000b4e:	1e73      	subs	r3, r6, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d000      	beq.n	8000b56 <__aeabi_dsub+0x6a>
 8000b54:	e1ba      	b.n	8000ecc <__aeabi_dsub+0x3e0>
 8000b56:	1a86      	subs	r6, r0, r2
 8000b58:	4663      	mov	r3, ip
 8000b5a:	42b0      	cmp	r0, r6
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	2501      	movs	r5, #1
 8000b60:	1ac9      	subs	r1, r1, r3
 8000b62:	4240      	negs	r0, r0
 8000b64:	1a09      	subs	r1, r1, r0
 8000b66:	020b      	lsls	r3, r1, #8
 8000b68:	d400      	bmi.n	8000b6c <__aeabi_dsub+0x80>
 8000b6a:	e147      	b.n	8000dfc <__aeabi_dsub+0x310>
 8000b6c:	0249      	lsls	r1, r1, #9
 8000b6e:	0a4b      	lsrs	r3, r1, #9
 8000b70:	4698      	mov	r8, r3
 8000b72:	4643      	mov	r3, r8
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dsub+0x8e>
 8000b78:	e189      	b.n	8000e8e <__aeabi_dsub+0x3a2>
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	f000 fb6e 	bl	800125c <__clzsi2>
 8000b80:	0003      	movs	r3, r0
 8000b82:	3b08      	subs	r3, #8
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	dd00      	ble.n	8000b8a <__aeabi_dsub+0x9e>
 8000b88:	e17c      	b.n	8000e84 <__aeabi_dsub+0x398>
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	0030      	movs	r0, r6
 8000b8e:	1ad2      	subs	r2, r2, r3
 8000b90:	4641      	mov	r1, r8
 8000b92:	40d0      	lsrs	r0, r2
 8000b94:	4099      	lsls	r1, r3
 8000b96:	0002      	movs	r2, r0
 8000b98:	409e      	lsls	r6, r3
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	429d      	cmp	r5, r3
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dsub+0xb6>
 8000ba0:	e16a      	b.n	8000e78 <__aeabi_dsub+0x38c>
 8000ba2:	1b5d      	subs	r5, r3, r5
 8000ba4:	1c6b      	adds	r3, r5, #1
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_dsub+0xc0>
 8000baa:	e194      	b.n	8000ed6 <__aeabi_dsub+0x3ea>
 8000bac:	2120      	movs	r1, #32
 8000bae:	0010      	movs	r0, r2
 8000bb0:	0035      	movs	r5, r6
 8000bb2:	1ac9      	subs	r1, r1, r3
 8000bb4:	408e      	lsls	r6, r1
 8000bb6:	40da      	lsrs	r2, r3
 8000bb8:	4088      	lsls	r0, r1
 8000bba:	40dd      	lsrs	r5, r3
 8000bbc:	1e71      	subs	r1, r6, #1
 8000bbe:	418e      	sbcs	r6, r1
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	4328      	orrs	r0, r5
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	4306      	orrs	r6, r0
 8000bca:	4032      	ands	r2, r6
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d009      	beq.n	8000be4 <__aeabi_dsub+0xf8>
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	4033      	ands	r3, r6
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d005      	beq.n	8000be4 <__aeabi_dsub+0xf8>
 8000bd8:	1d33      	adds	r3, r6, #4
 8000bda:	42b3      	cmp	r3, r6
 8000bdc:	41b6      	sbcs	r6, r6
 8000bde:	4276      	negs	r6, r6
 8000be0:	1989      	adds	r1, r1, r6
 8000be2:	001e      	movs	r6, r3
 8000be4:	020b      	lsls	r3, r1, #8
 8000be6:	d400      	bmi.n	8000bea <__aeabi_dsub+0xfe>
 8000be8:	e23d      	b.n	8001066 <__aeabi_dsub+0x57a>
 8000bea:	1c6a      	adds	r2, r5, #1
 8000bec:	4b91      	ldr	r3, [pc, #580]	; (8000e34 <__aeabi_dsub+0x348>)
 8000bee:	0555      	lsls	r5, r2, #21
 8000bf0:	0d6d      	lsrs	r5, r5, #21
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dsub+0x10c>
 8000bf6:	e119      	b.n	8000e2c <__aeabi_dsub+0x340>
 8000bf8:	4a8f      	ldr	r2, [pc, #572]	; (8000e38 <__aeabi_dsub+0x34c>)
 8000bfa:	08f6      	lsrs	r6, r6, #3
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	0757      	lsls	r7, r2, #29
 8000c00:	0252      	lsls	r2, r2, #9
 8000c02:	4337      	orrs	r7, r6
 8000c04:	0b12      	lsrs	r2, r2, #12
 8000c06:	e09b      	b.n	8000d40 <__aeabi_dsub+0x254>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_dsub+0x122>
 8000c0c:	e0c5      	b.n	8000d9a <__aeabi_dsub+0x2ae>
 8000c0e:	1c6e      	adds	r6, r5, #1
 8000c10:	0576      	lsls	r6, r6, #21
 8000c12:	0d76      	lsrs	r6, r6, #21
 8000c14:	2e01      	cmp	r6, #1
 8000c16:	dc00      	bgt.n	8000c1a <__aeabi_dsub+0x12e>
 8000c18:	e148      	b.n	8000eac <__aeabi_dsub+0x3c0>
 8000c1a:	4667      	mov	r7, ip
 8000c1c:	1a86      	subs	r6, r0, r2
 8000c1e:	1bcb      	subs	r3, r1, r7
 8000c20:	42b0      	cmp	r0, r6
 8000c22:	41bf      	sbcs	r7, r7
 8000c24:	427f      	negs	r7, r7
 8000c26:	46b8      	mov	r8, r7
 8000c28:	001f      	movs	r7, r3
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	1aff      	subs	r7, r7, r3
 8000c2e:	003b      	movs	r3, r7
 8000c30:	46b8      	mov	r8, r7
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	d500      	bpl.n	8000c38 <__aeabi_dsub+0x14c>
 8000c36:	e15f      	b.n	8000ef8 <__aeabi_dsub+0x40c>
 8000c38:	4337      	orrs	r7, r6
 8000c3a:	d19a      	bne.n	8000b72 <__aeabi_dsub+0x86>
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2400      	movs	r4, #0
 8000c40:	2500      	movs	r5, #0
 8000c42:	e079      	b.n	8000d38 <__aeabi_dsub+0x24c>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	dc00      	bgt.n	8000c4a <__aeabi_dsub+0x15e>
 8000c48:	e0fa      	b.n	8000e40 <__aeabi_dsub+0x354>
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dsub+0x164>
 8000c4e:	e08d      	b.n	8000d6c <__aeabi_dsub+0x280>
 8000c50:	4b78      	ldr	r3, [pc, #480]	; (8000e34 <__aeabi_dsub+0x348>)
 8000c52:	429d      	cmp	r5, r3
 8000c54:	d067      	beq.n	8000d26 <__aeabi_dsub+0x23a>
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	4667      	mov	r7, ip
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	431f      	orrs	r7, r3
 8000c5e:	46bc      	mov	ip, r7
 8000c60:	2e38      	cmp	r6, #56	; 0x38
 8000c62:	dc00      	bgt.n	8000c66 <__aeabi_dsub+0x17a>
 8000c64:	e152      	b.n	8000f0c <__aeabi_dsub+0x420>
 8000c66:	4663      	mov	r3, ip
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4193      	sbcs	r3, r2
 8000c6e:	181e      	adds	r6, r3, r0
 8000c70:	4286      	cmp	r6, r0
 8000c72:	4180      	sbcs	r0, r0
 8000c74:	4240      	negs	r0, r0
 8000c76:	1809      	adds	r1, r1, r0
 8000c78:	020b      	lsls	r3, r1, #8
 8000c7a:	d400      	bmi.n	8000c7e <__aeabi_dsub+0x192>
 8000c7c:	e0be      	b.n	8000dfc <__aeabi_dsub+0x310>
 8000c7e:	4b6d      	ldr	r3, [pc, #436]	; (8000e34 <__aeabi_dsub+0x348>)
 8000c80:	3501      	adds	r5, #1
 8000c82:	429d      	cmp	r5, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dsub+0x19c>
 8000c86:	e0d2      	b.n	8000e2e <__aeabi_dsub+0x342>
 8000c88:	4a6b      	ldr	r2, [pc, #428]	; (8000e38 <__aeabi_dsub+0x34c>)
 8000c8a:	0873      	lsrs	r3, r6, #1
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	400e      	ands	r6, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	0851      	lsrs	r1, r2, #1
 8000c96:	07d3      	lsls	r3, r2, #31
 8000c98:	2207      	movs	r2, #7
 8000c9a:	431e      	orrs	r6, r3
 8000c9c:	4032      	ands	r2, r6
 8000c9e:	e795      	b.n	8000bcc <__aeabi_dsub+0xe0>
 8000ca0:	001e      	movs	r6, r3
 8000ca2:	4316      	orrs	r6, r2
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dsub+0x1bc>
 8000ca6:	e745      	b.n	8000b34 <__aeabi_dsub+0x48>
 8000ca8:	e740      	b.n	8000b2c <__aeabi_dsub+0x40>
 8000caa:	4b62      	ldr	r3, [pc, #392]	; (8000e34 <__aeabi_dsub+0x348>)
 8000cac:	429d      	cmp	r5, r3
 8000cae:	d03a      	beq.n	8000d26 <__aeabi_dsub+0x23a>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	4667      	mov	r7, ip
 8000cb4:	041b      	lsls	r3, r3, #16
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	46bc      	mov	ip, r7
 8000cba:	2e38      	cmp	r6, #56	; 0x38
 8000cbc:	dd00      	ble.n	8000cc0 <__aeabi_dsub+0x1d4>
 8000cbe:	e0eb      	b.n	8000e98 <__aeabi_dsub+0x3ac>
 8000cc0:	2e1f      	cmp	r6, #31
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_dsub+0x1da>
 8000cc4:	e13a      	b.n	8000f3c <__aeabi_dsub+0x450>
 8000cc6:	0033      	movs	r3, r6
 8000cc8:	4667      	mov	r7, ip
 8000cca:	3b20      	subs	r3, #32
 8000ccc:	40df      	lsrs	r7, r3
 8000cce:	003b      	movs	r3, r7
 8000cd0:	2e20      	cmp	r6, #32
 8000cd2:	d005      	beq.n	8000ce0 <__aeabi_dsub+0x1f4>
 8000cd4:	2740      	movs	r7, #64	; 0x40
 8000cd6:	1bbf      	subs	r7, r7, r6
 8000cd8:	4666      	mov	r6, ip
 8000cda:	40be      	lsls	r6, r7
 8000cdc:	4332      	orrs	r2, r6
 8000cde:	4690      	mov	r8, r2
 8000ce0:	4646      	mov	r6, r8
 8000ce2:	1e72      	subs	r2, r6, #1
 8000ce4:	4196      	sbcs	r6, r2
 8000ce6:	4333      	orrs	r3, r6
 8000ce8:	e0da      	b.n	8000ea0 <__aeabi_dsub+0x3b4>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dsub+0x204>
 8000cee:	e214      	b.n	800111a <__aeabi_dsub+0x62e>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dsub+0x20c>
 8000cf6:	e168      	b.n	8000fca <__aeabi_dsub+0x4de>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	074e      	lsls	r6, r1, #29
 8000cfc:	08c0      	lsrs	r0, r0, #3
 8000cfe:	08c9      	lsrs	r1, r1, #3
 8000d00:	031b      	lsls	r3, r3, #12
 8000d02:	4306      	orrs	r6, r0
 8000d04:	4219      	tst	r1, r3
 8000d06:	d008      	beq.n	8000d1a <__aeabi_dsub+0x22e>
 8000d08:	4660      	mov	r0, ip
 8000d0a:	08c0      	lsrs	r0, r0, #3
 8000d0c:	4218      	tst	r0, r3
 8000d0e:	d104      	bne.n	8000d1a <__aeabi_dsub+0x22e>
 8000d10:	4663      	mov	r3, ip
 8000d12:	0001      	movs	r1, r0
 8000d14:	08d2      	lsrs	r2, r2, #3
 8000d16:	075e      	lsls	r6, r3, #29
 8000d18:	4316      	orrs	r6, r2
 8000d1a:	00f3      	lsls	r3, r6, #3
 8000d1c:	4699      	mov	r9, r3
 8000d1e:	00c9      	lsls	r1, r1, #3
 8000d20:	0f72      	lsrs	r2, r6, #29
 8000d22:	4d44      	ldr	r5, [pc, #272]	; (8000e34 <__aeabi_dsub+0x348>)
 8000d24:	4311      	orrs	r1, r2
 8000d26:	464b      	mov	r3, r9
 8000d28:	08de      	lsrs	r6, r3, #3
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <__aeabi_dsub+0x348>)
 8000d2c:	074f      	lsls	r7, r1, #29
 8000d2e:	4337      	orrs	r7, r6
 8000d30:	08ca      	lsrs	r2, r1, #3
 8000d32:	429d      	cmp	r5, r3
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dsub+0x24c>
 8000d36:	e06e      	b.n	8000e16 <__aeabi_dsub+0x32a>
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	056d      	lsls	r5, r5, #21
 8000d3c:	0b12      	lsrs	r2, r2, #12
 8000d3e:	0d6d      	lsrs	r5, r5, #21
 8000d40:	2100      	movs	r1, #0
 8000d42:	0312      	lsls	r2, r2, #12
 8000d44:	0b13      	lsrs	r3, r2, #12
 8000d46:	0d0a      	lsrs	r2, r1, #20
 8000d48:	0512      	lsls	r2, r2, #20
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <__aeabi_dsub+0x350>)
 8000d4e:	052d      	lsls	r5, r5, #20
 8000d50:	4013      	ands	r3, r2
 8000d52:	432b      	orrs	r3, r5
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	07e4      	lsls	r4, r4, #31
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	4323      	orrs	r3, r4
 8000d5c:	0038      	movs	r0, r7
 8000d5e:	0019      	movs	r1, r3
 8000d60:	bc3c      	pop	{r2, r3, r4, r5}
 8000d62:	4690      	mov	r8, r2
 8000d64:	4699      	mov	r9, r3
 8000d66:	46a2      	mov	sl, r4
 8000d68:	46ab      	mov	fp, r5
 8000d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	d011      	beq.n	8000d96 <__aeabi_dsub+0x2aa>
 8000d72:	1e73      	subs	r3, r6, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dsub+0x28e>
 8000d78:	e107      	b.n	8000f8a <__aeabi_dsub+0x49e>
 8000d7a:	1886      	adds	r6, r0, r2
 8000d7c:	4286      	cmp	r6, r0
 8000d7e:	4180      	sbcs	r0, r0
 8000d80:	4461      	add	r1, ip
 8000d82:	4240      	negs	r0, r0
 8000d84:	1809      	adds	r1, r1, r0
 8000d86:	2501      	movs	r5, #1
 8000d88:	020b      	lsls	r3, r1, #8
 8000d8a:	d537      	bpl.n	8000dfc <__aeabi_dsub+0x310>
 8000d8c:	2502      	movs	r5, #2
 8000d8e:	e77b      	b.n	8000c88 <__aeabi_dsub+0x19c>
 8000d90:	003e      	movs	r6, r7
 8000d92:	4661      	mov	r1, ip
 8000d94:	4691      	mov	r9, r2
 8000d96:	0035      	movs	r5, r6
 8000d98:	e7c5      	b.n	8000d26 <__aeabi_dsub+0x23a>
 8000d9a:	465c      	mov	r4, fp
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dsub+0x2b6>
 8000da0:	e0e1      	b.n	8000f66 <__aeabi_dsub+0x47a>
 8000da2:	000b      	movs	r3, r1
 8000da4:	4303      	orrs	r3, r0
 8000da6:	d0f3      	beq.n	8000d90 <__aeabi_dsub+0x2a4>
 8000da8:	1c73      	adds	r3, r6, #1
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x2c2>
 8000dac:	e1ac      	b.n	8001108 <__aeabi_dsub+0x61c>
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <__aeabi_dsub+0x348>)
 8000db0:	429f      	cmp	r7, r3
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dsub+0x2ca>
 8000db4:	e13a      	b.n	800102c <__aeabi_dsub+0x540>
 8000db6:	43f3      	mvns	r3, r6
 8000db8:	2b38      	cmp	r3, #56	; 0x38
 8000dba:	dd00      	ble.n	8000dbe <__aeabi_dsub+0x2d2>
 8000dbc:	e16f      	b.n	800109e <__aeabi_dsub+0x5b2>
 8000dbe:	2b1f      	cmp	r3, #31
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_dsub+0x2d8>
 8000dc2:	e18c      	b.n	80010de <__aeabi_dsub+0x5f2>
 8000dc4:	2520      	movs	r5, #32
 8000dc6:	000e      	movs	r6, r1
 8000dc8:	1aed      	subs	r5, r5, r3
 8000dca:	40ae      	lsls	r6, r5
 8000dcc:	46b0      	mov	r8, r6
 8000dce:	0006      	movs	r6, r0
 8000dd0:	46aa      	mov	sl, r5
 8000dd2:	40de      	lsrs	r6, r3
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	4335      	orrs	r5, r6
 8000dd8:	002e      	movs	r6, r5
 8000dda:	4655      	mov	r5, sl
 8000ddc:	40d9      	lsrs	r1, r3
 8000dde:	40a8      	lsls	r0, r5
 8000de0:	4663      	mov	r3, ip
 8000de2:	1e45      	subs	r5, r0, #1
 8000de4:	41a8      	sbcs	r0, r5
 8000de6:	1a5b      	subs	r3, r3, r1
 8000de8:	469c      	mov	ip, r3
 8000dea:	4330      	orrs	r0, r6
 8000dec:	1a16      	subs	r6, r2, r0
 8000dee:	42b2      	cmp	r2, r6
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4663      	mov	r3, ip
 8000df4:	4252      	negs	r2, r2
 8000df6:	1a99      	subs	r1, r3, r2
 8000df8:	003d      	movs	r5, r7
 8000dfa:	e6b4      	b.n	8000b66 <__aeabi_dsub+0x7a>
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	4032      	ands	r2, r6
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dsub+0x31a>
 8000e04:	e6e4      	b.n	8000bd0 <__aeabi_dsub+0xe4>
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <__aeabi_dsub+0x348>)
 8000e08:	08f6      	lsrs	r6, r6, #3
 8000e0a:	074f      	lsls	r7, r1, #29
 8000e0c:	4337      	orrs	r7, r6
 8000e0e:	08ca      	lsrs	r2, r1, #3
 8000e10:	429d      	cmp	r5, r3
 8000e12:	d000      	beq.n	8000e16 <__aeabi_dsub+0x32a>
 8000e14:	e790      	b.n	8000d38 <__aeabi_dsub+0x24c>
 8000e16:	003b      	movs	r3, r7
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dsub+0x332>
 8000e1c:	e1a6      	b.n	800116c <__aeabi_dsub+0x680>
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	031b      	lsls	r3, r3, #12
 8000e22:	431a      	orrs	r2, r3
 8000e24:	0312      	lsls	r2, r2, #12
 8000e26:	0b12      	lsrs	r2, r2, #12
 8000e28:	4d02      	ldr	r5, [pc, #8]	; (8000e34 <__aeabi_dsub+0x348>)
 8000e2a:	e789      	b.n	8000d40 <__aeabi_dsub+0x254>
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2700      	movs	r7, #0
 8000e32:	e785      	b.n	8000d40 <__aeabi_dsub+0x254>
 8000e34:	000007ff 	.word	0x000007ff
 8000e38:	ff7fffff 	.word	0xff7fffff
 8000e3c:	800fffff 	.word	0x800fffff
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d000      	beq.n	8000e46 <__aeabi_dsub+0x35a>
 8000e44:	e0c7      	b.n	8000fd6 <__aeabi_dsub+0x4ea>
 8000e46:	1c6b      	adds	r3, r5, #1
 8000e48:	055e      	lsls	r6, r3, #21
 8000e4a:	0d76      	lsrs	r6, r6, #21
 8000e4c:	2e01      	cmp	r6, #1
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_dsub+0x366>
 8000e50:	e0f0      	b.n	8001034 <__aeabi_dsub+0x548>
 8000e52:	4dc8      	ldr	r5, [pc, #800]	; (8001174 <__aeabi_dsub+0x688>)
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dsub+0x36e>
 8000e58:	e0b9      	b.n	8000fce <__aeabi_dsub+0x4e2>
 8000e5a:	1885      	adds	r5, r0, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	4285      	cmp	r5, r0
 8000e60:	4189      	sbcs	r1, r1
 8000e62:	4462      	add	r2, ip
 8000e64:	4249      	negs	r1, r1
 8000e66:	1851      	adds	r1, r2, r1
 8000e68:	2207      	movs	r2, #7
 8000e6a:	07ce      	lsls	r6, r1, #31
 8000e6c:	086d      	lsrs	r5, r5, #1
 8000e6e:	432e      	orrs	r6, r5
 8000e70:	0849      	lsrs	r1, r1, #1
 8000e72:	4032      	ands	r2, r6
 8000e74:	001d      	movs	r5, r3
 8000e76:	e6a9      	b.n	8000bcc <__aeabi_dsub+0xe0>
 8000e78:	49bf      	ldr	r1, [pc, #764]	; (8001178 <__aeabi_dsub+0x68c>)
 8000e7a:	1aed      	subs	r5, r5, r3
 8000e7c:	4011      	ands	r1, r2
 8000e7e:	2207      	movs	r2, #7
 8000e80:	4032      	ands	r2, r6
 8000e82:	e6a3      	b.n	8000bcc <__aeabi_dsub+0xe0>
 8000e84:	0032      	movs	r2, r6
 8000e86:	3828      	subs	r0, #40	; 0x28
 8000e88:	4082      	lsls	r2, r0
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	e686      	b.n	8000b9c <__aeabi_dsub+0xb0>
 8000e8e:	0030      	movs	r0, r6
 8000e90:	f000 f9e4 	bl	800125c <__clzsi2>
 8000e94:	3020      	adds	r0, #32
 8000e96:	e673      	b.n	8000b80 <__aeabi_dsub+0x94>
 8000e98:	4663      	mov	r3, ip
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	1e5a      	subs	r2, r3, #1
 8000e9e:	4193      	sbcs	r3, r2
 8000ea0:	1ac6      	subs	r6, r0, r3
 8000ea2:	42b0      	cmp	r0, r6
 8000ea4:	4180      	sbcs	r0, r0
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	1a09      	subs	r1, r1, r0
 8000eaa:	e65c      	b.n	8000b66 <__aeabi_dsub+0x7a>
 8000eac:	000e      	movs	r6, r1
 8000eae:	4667      	mov	r7, ip
 8000eb0:	4306      	orrs	r6, r0
 8000eb2:	4317      	orrs	r7, r2
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d15e      	bne.n	8000f76 <__aeabi_dsub+0x48a>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d000      	beq.n	8000ebe <__aeabi_dsub+0x3d2>
 8000ebc:	e0f3      	b.n	80010a6 <__aeabi_dsub+0x5ba>
 8000ebe:	2f00      	cmp	r7, #0
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x3d8>
 8000ec2:	e11e      	b.n	8001102 <__aeabi_dsub+0x616>
 8000ec4:	465c      	mov	r4, fp
 8000ec6:	4661      	mov	r1, ip
 8000ec8:	4691      	mov	r9, r2
 8000eca:	e72c      	b.n	8000d26 <__aeabi_dsub+0x23a>
 8000ecc:	4fa9      	ldr	r7, [pc, #676]	; (8001174 <__aeabi_dsub+0x688>)
 8000ece:	42be      	cmp	r6, r7
 8000ed0:	d07b      	beq.n	8000fca <__aeabi_dsub+0x4de>
 8000ed2:	001e      	movs	r6, r3
 8000ed4:	e6f1      	b.n	8000cba <__aeabi_dsub+0x1ce>
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	3d1f      	subs	r5, #31
 8000eda:	40e8      	lsrs	r0, r5
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d003      	beq.n	8000ee8 <__aeabi_dsub+0x3fc>
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	4316      	orrs	r6, r2
 8000ee8:	1e73      	subs	r3, r6, #1
 8000eea:	419e      	sbcs	r6, r3
 8000eec:	2207      	movs	r2, #7
 8000eee:	4306      	orrs	r6, r0
 8000ef0:	4032      	ands	r2, r6
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	e783      	b.n	8000e00 <__aeabi_dsub+0x314>
 8000ef8:	1a16      	subs	r6, r2, r0
 8000efa:	4663      	mov	r3, ip
 8000efc:	42b2      	cmp	r2, r6
 8000efe:	4180      	sbcs	r0, r0
 8000f00:	1a59      	subs	r1, r3, r1
 8000f02:	4240      	negs	r0, r0
 8000f04:	1a0b      	subs	r3, r1, r0
 8000f06:	4698      	mov	r8, r3
 8000f08:	465c      	mov	r4, fp
 8000f0a:	e632      	b.n	8000b72 <__aeabi_dsub+0x86>
 8000f0c:	2e1f      	cmp	r6, #31
 8000f0e:	dd00      	ble.n	8000f12 <__aeabi_dsub+0x426>
 8000f10:	e0ab      	b.n	800106a <__aeabi_dsub+0x57e>
 8000f12:	2720      	movs	r7, #32
 8000f14:	1bbb      	subs	r3, r7, r6
 8000f16:	469a      	mov	sl, r3
 8000f18:	4663      	mov	r3, ip
 8000f1a:	4657      	mov	r7, sl
 8000f1c:	40bb      	lsls	r3, r7
 8000f1e:	4699      	mov	r9, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	464f      	mov	r7, r9
 8000f24:	40f3      	lsrs	r3, r6
 8000f26:	431f      	orrs	r7, r3
 8000f28:	003b      	movs	r3, r7
 8000f2a:	4657      	mov	r7, sl
 8000f2c:	40ba      	lsls	r2, r7
 8000f2e:	1e57      	subs	r7, r2, #1
 8000f30:	41ba      	sbcs	r2, r7
 8000f32:	4313      	orrs	r3, r2
 8000f34:	4662      	mov	r2, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	1889      	adds	r1, r1, r2
 8000f3a:	e698      	b.n	8000c6e <__aeabi_dsub+0x182>
 8000f3c:	2720      	movs	r7, #32
 8000f3e:	1bbb      	subs	r3, r7, r6
 8000f40:	469a      	mov	sl, r3
 8000f42:	4663      	mov	r3, ip
 8000f44:	4657      	mov	r7, sl
 8000f46:	40bb      	lsls	r3, r7
 8000f48:	4699      	mov	r9, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	464f      	mov	r7, r9
 8000f4e:	40f3      	lsrs	r3, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	003b      	movs	r3, r7
 8000f54:	4657      	mov	r7, sl
 8000f56:	40ba      	lsls	r2, r7
 8000f58:	1e57      	subs	r7, r2, #1
 8000f5a:	41ba      	sbcs	r2, r7
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	4662      	mov	r2, ip
 8000f60:	40f2      	lsrs	r2, r6
 8000f62:	1a89      	subs	r1, r1, r2
 8000f64:	e79c      	b.n	8000ea0 <__aeabi_dsub+0x3b4>
 8000f66:	4b83      	ldr	r3, [pc, #524]	; (8001174 <__aeabi_dsub+0x688>)
 8000f68:	429f      	cmp	r7, r3
 8000f6a:	d05f      	beq.n	800102c <__aeabi_dsub+0x540>
 8000f6c:	2580      	movs	r5, #128	; 0x80
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	4273      	negs	r3, r6
 8000f72:	4329      	orrs	r1, r5
 8000f74:	e720      	b.n	8000db8 <__aeabi_dsub+0x2cc>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d10c      	bne.n	8000f94 <__aeabi_dsub+0x4a8>
 8000f7a:	2f00      	cmp	r7, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dsub+0x494>
 8000f7e:	e0d0      	b.n	8001122 <__aeabi_dsub+0x636>
 8000f80:	465c      	mov	r4, fp
 8000f82:	4661      	mov	r1, ip
 8000f84:	4691      	mov	r9, r2
 8000f86:	4d7b      	ldr	r5, [pc, #492]	; (8001174 <__aeabi_dsub+0x688>)
 8000f88:	e6cd      	b.n	8000d26 <__aeabi_dsub+0x23a>
 8000f8a:	4f7a      	ldr	r7, [pc, #488]	; (8001174 <__aeabi_dsub+0x688>)
 8000f8c:	42be      	cmp	r6, r7
 8000f8e:	d01c      	beq.n	8000fca <__aeabi_dsub+0x4de>
 8000f90:	001e      	movs	r6, r3
 8000f92:	e665      	b.n	8000c60 <__aeabi_dsub+0x174>
 8000f94:	2f00      	cmp	r7, #0
 8000f96:	d018      	beq.n	8000fca <__aeabi_dsub+0x4de>
 8000f98:	08c0      	lsrs	r0, r0, #3
 8000f9a:	074e      	lsls	r6, r1, #29
 8000f9c:	4306      	orrs	r6, r0
 8000f9e:	2080      	movs	r0, #128	; 0x80
 8000fa0:	08c9      	lsrs	r1, r1, #3
 8000fa2:	0300      	lsls	r0, r0, #12
 8000fa4:	4201      	tst	r1, r0
 8000fa6:	d008      	beq.n	8000fba <__aeabi_dsub+0x4ce>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	08dc      	lsrs	r4, r3, #3
 8000fac:	4204      	tst	r4, r0
 8000fae:	d104      	bne.n	8000fba <__aeabi_dsub+0x4ce>
 8000fb0:	0021      	movs	r1, r4
 8000fb2:	46da      	mov	sl, fp
 8000fb4:	08d2      	lsrs	r2, r2, #3
 8000fb6:	075e      	lsls	r6, r3, #29
 8000fb8:	4316      	orrs	r6, r2
 8000fba:	00f3      	lsls	r3, r6, #3
 8000fbc:	4699      	mov	r9, r3
 8000fbe:	2401      	movs	r4, #1
 8000fc0:	4653      	mov	r3, sl
 8000fc2:	00c9      	lsls	r1, r1, #3
 8000fc4:	0f72      	lsrs	r2, r6, #29
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	401c      	ands	r4, r3
 8000fca:	4d6a      	ldr	r5, [pc, #424]	; (8001174 <__aeabi_dsub+0x688>)
 8000fcc:	e6ab      	b.n	8000d26 <__aeabi_dsub+0x23a>
 8000fce:	001d      	movs	r5, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2700      	movs	r7, #0
 8000fd4:	e6b4      	b.n	8000d40 <__aeabi_dsub+0x254>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d159      	bne.n	800108e <__aeabi_dsub+0x5a2>
 8000fda:	000b      	movs	r3, r1
 8000fdc:	4303      	orrs	r3, r0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dsub+0x4f6>
 8000fe0:	e6d6      	b.n	8000d90 <__aeabi_dsub+0x2a4>
 8000fe2:	1c73      	adds	r3, r6, #1
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dsub+0x4fc>
 8000fe6:	e0b2      	b.n	800114e <__aeabi_dsub+0x662>
 8000fe8:	4b62      	ldr	r3, [pc, #392]	; (8001174 <__aeabi_dsub+0x688>)
 8000fea:	429f      	cmp	r7, r3
 8000fec:	d01e      	beq.n	800102c <__aeabi_dsub+0x540>
 8000fee:	43f3      	mvns	r3, r6
 8000ff0:	2b38      	cmp	r3, #56	; 0x38
 8000ff2:	dc6f      	bgt.n	80010d4 <__aeabi_dsub+0x5e8>
 8000ff4:	2b1f      	cmp	r3, #31
 8000ff6:	dd00      	ble.n	8000ffa <__aeabi_dsub+0x50e>
 8000ff8:	e097      	b.n	800112a <__aeabi_dsub+0x63e>
 8000ffa:	2520      	movs	r5, #32
 8000ffc:	000e      	movs	r6, r1
 8000ffe:	1aed      	subs	r5, r5, r3
 8001000:	40ae      	lsls	r6, r5
 8001002:	46b0      	mov	r8, r6
 8001004:	0006      	movs	r6, r0
 8001006:	46aa      	mov	sl, r5
 8001008:	40de      	lsrs	r6, r3
 800100a:	4645      	mov	r5, r8
 800100c:	4335      	orrs	r5, r6
 800100e:	002e      	movs	r6, r5
 8001010:	4655      	mov	r5, sl
 8001012:	40a8      	lsls	r0, r5
 8001014:	40d9      	lsrs	r1, r3
 8001016:	1e45      	subs	r5, r0, #1
 8001018:	41a8      	sbcs	r0, r5
 800101a:	448c      	add	ip, r1
 800101c:	4306      	orrs	r6, r0
 800101e:	18b6      	adds	r6, r6, r2
 8001020:	4296      	cmp	r6, r2
 8001022:	4192      	sbcs	r2, r2
 8001024:	4251      	negs	r1, r2
 8001026:	4461      	add	r1, ip
 8001028:	003d      	movs	r5, r7
 800102a:	e625      	b.n	8000c78 <__aeabi_dsub+0x18c>
 800102c:	003d      	movs	r5, r7
 800102e:	4661      	mov	r1, ip
 8001030:	4691      	mov	r9, r2
 8001032:	e678      	b.n	8000d26 <__aeabi_dsub+0x23a>
 8001034:	000b      	movs	r3, r1
 8001036:	4303      	orrs	r3, r0
 8001038:	2d00      	cmp	r5, #0
 800103a:	d000      	beq.n	800103e <__aeabi_dsub+0x552>
 800103c:	e655      	b.n	8000cea <__aeabi_dsub+0x1fe>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f5      	beq.n	800102e <__aeabi_dsub+0x542>
 8001042:	4663      	mov	r3, ip
 8001044:	4313      	orrs	r3, r2
 8001046:	d100      	bne.n	800104a <__aeabi_dsub+0x55e>
 8001048:	e66d      	b.n	8000d26 <__aeabi_dsub+0x23a>
 800104a:	1886      	adds	r6, r0, r2
 800104c:	4286      	cmp	r6, r0
 800104e:	4180      	sbcs	r0, r0
 8001050:	4461      	add	r1, ip
 8001052:	4240      	negs	r0, r0
 8001054:	1809      	adds	r1, r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	020b      	lsls	r3, r1, #8
 800105a:	d400      	bmi.n	800105e <__aeabi_dsub+0x572>
 800105c:	e6d0      	b.n	8000e00 <__aeabi_dsub+0x314>
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <__aeabi_dsub+0x68c>)
 8001060:	3501      	adds	r5, #1
 8001062:	4019      	ands	r1, r3
 8001064:	e5b2      	b.n	8000bcc <__aeabi_dsub+0xe0>
 8001066:	46b1      	mov	r9, r6
 8001068:	e65d      	b.n	8000d26 <__aeabi_dsub+0x23a>
 800106a:	0033      	movs	r3, r6
 800106c:	4667      	mov	r7, ip
 800106e:	3b20      	subs	r3, #32
 8001070:	40df      	lsrs	r7, r3
 8001072:	003b      	movs	r3, r7
 8001074:	2e20      	cmp	r6, #32
 8001076:	d005      	beq.n	8001084 <__aeabi_dsub+0x598>
 8001078:	2740      	movs	r7, #64	; 0x40
 800107a:	1bbf      	subs	r7, r7, r6
 800107c:	4666      	mov	r6, ip
 800107e:	40be      	lsls	r6, r7
 8001080:	4332      	orrs	r2, r6
 8001082:	4690      	mov	r8, r2
 8001084:	4646      	mov	r6, r8
 8001086:	1e72      	subs	r2, r6, #1
 8001088:	4196      	sbcs	r6, r2
 800108a:	4333      	orrs	r3, r6
 800108c:	e5ef      	b.n	8000c6e <__aeabi_dsub+0x182>
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <__aeabi_dsub+0x688>)
 8001090:	429f      	cmp	r7, r3
 8001092:	d0cb      	beq.n	800102c <__aeabi_dsub+0x540>
 8001094:	2580      	movs	r5, #128	; 0x80
 8001096:	042d      	lsls	r5, r5, #16
 8001098:	4273      	negs	r3, r6
 800109a:	4329      	orrs	r1, r5
 800109c:	e7a8      	b.n	8000ff0 <__aeabi_dsub+0x504>
 800109e:	4308      	orrs	r0, r1
 80010a0:	1e41      	subs	r1, r0, #1
 80010a2:	4188      	sbcs	r0, r1
 80010a4:	e6a2      	b.n	8000dec <__aeabi_dsub+0x300>
 80010a6:	2f00      	cmp	r7, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_dsub+0x5c0>
 80010aa:	e63c      	b.n	8000d26 <__aeabi_dsub+0x23a>
 80010ac:	4663      	mov	r3, ip
 80010ae:	1a86      	subs	r6, r0, r2
 80010b0:	1acf      	subs	r7, r1, r3
 80010b2:	42b0      	cmp	r0, r6
 80010b4:	419b      	sbcs	r3, r3
 80010b6:	425b      	negs	r3, r3
 80010b8:	1afb      	subs	r3, r7, r3
 80010ba:	4698      	mov	r8, r3
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	d54e      	bpl.n	800115e <__aeabi_dsub+0x672>
 80010c0:	1a16      	subs	r6, r2, r0
 80010c2:	4663      	mov	r3, ip
 80010c4:	42b2      	cmp	r2, r6
 80010c6:	4192      	sbcs	r2, r2
 80010c8:	1a59      	subs	r1, r3, r1
 80010ca:	4252      	negs	r2, r2
 80010cc:	1a89      	subs	r1, r1, r2
 80010ce:	465c      	mov	r4, fp
 80010d0:	2200      	movs	r2, #0
 80010d2:	e57b      	b.n	8000bcc <__aeabi_dsub+0xe0>
 80010d4:	4301      	orrs	r1, r0
 80010d6:	000e      	movs	r6, r1
 80010d8:	1e71      	subs	r1, r6, #1
 80010da:	418e      	sbcs	r6, r1
 80010dc:	e79f      	b.n	800101e <__aeabi_dsub+0x532>
 80010de:	001d      	movs	r5, r3
 80010e0:	000e      	movs	r6, r1
 80010e2:	3d20      	subs	r5, #32
 80010e4:	40ee      	lsrs	r6, r5
 80010e6:	46b0      	mov	r8, r6
 80010e8:	2b20      	cmp	r3, #32
 80010ea:	d004      	beq.n	80010f6 <__aeabi_dsub+0x60a>
 80010ec:	2540      	movs	r5, #64	; 0x40
 80010ee:	1aeb      	subs	r3, r5, r3
 80010f0:	4099      	lsls	r1, r3
 80010f2:	4308      	orrs	r0, r1
 80010f4:	4681      	mov	r9, r0
 80010f6:	4648      	mov	r0, r9
 80010f8:	4643      	mov	r3, r8
 80010fa:	1e41      	subs	r1, r0, #1
 80010fc:	4188      	sbcs	r0, r1
 80010fe:	4318      	orrs	r0, r3
 8001100:	e674      	b.n	8000dec <__aeabi_dsub+0x300>
 8001102:	2200      	movs	r2, #0
 8001104:	2400      	movs	r4, #0
 8001106:	e617      	b.n	8000d38 <__aeabi_dsub+0x24c>
 8001108:	1a16      	subs	r6, r2, r0
 800110a:	4663      	mov	r3, ip
 800110c:	42b2      	cmp	r2, r6
 800110e:	4192      	sbcs	r2, r2
 8001110:	1a59      	subs	r1, r3, r1
 8001112:	4252      	negs	r2, r2
 8001114:	1a89      	subs	r1, r1, r2
 8001116:	003d      	movs	r5, r7
 8001118:	e525      	b.n	8000b66 <__aeabi_dsub+0x7a>
 800111a:	4661      	mov	r1, ip
 800111c:	4691      	mov	r9, r2
 800111e:	4d15      	ldr	r5, [pc, #84]	; (8001174 <__aeabi_dsub+0x688>)
 8001120:	e601      	b.n	8000d26 <__aeabi_dsub+0x23a>
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	2400      	movs	r4, #0
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	e679      	b.n	8000e1e <__aeabi_dsub+0x332>
 800112a:	001d      	movs	r5, r3
 800112c:	000e      	movs	r6, r1
 800112e:	3d20      	subs	r5, #32
 8001130:	40ee      	lsrs	r6, r5
 8001132:	46b0      	mov	r8, r6
 8001134:	2b20      	cmp	r3, #32
 8001136:	d004      	beq.n	8001142 <__aeabi_dsub+0x656>
 8001138:	2540      	movs	r5, #64	; 0x40
 800113a:	1aeb      	subs	r3, r5, r3
 800113c:	4099      	lsls	r1, r3
 800113e:	4308      	orrs	r0, r1
 8001140:	4681      	mov	r9, r0
 8001142:	464e      	mov	r6, r9
 8001144:	4643      	mov	r3, r8
 8001146:	1e71      	subs	r1, r6, #1
 8001148:	418e      	sbcs	r6, r1
 800114a:	431e      	orrs	r6, r3
 800114c:	e767      	b.n	800101e <__aeabi_dsub+0x532>
 800114e:	1886      	adds	r6, r0, r2
 8001150:	4296      	cmp	r6, r2
 8001152:	419b      	sbcs	r3, r3
 8001154:	4461      	add	r1, ip
 8001156:	425b      	negs	r3, r3
 8001158:	18c9      	adds	r1, r1, r3
 800115a:	003d      	movs	r5, r7
 800115c:	e58c      	b.n	8000c78 <__aeabi_dsub+0x18c>
 800115e:	4647      	mov	r7, r8
 8001160:	4337      	orrs	r7, r6
 8001162:	d0ce      	beq.n	8001102 <__aeabi_dsub+0x616>
 8001164:	2207      	movs	r2, #7
 8001166:	4641      	mov	r1, r8
 8001168:	4032      	ands	r2, r6
 800116a:	e649      	b.n	8000e00 <__aeabi_dsub+0x314>
 800116c:	2700      	movs	r7, #0
 800116e:	003a      	movs	r2, r7
 8001170:	e5e6      	b.n	8000d40 <__aeabi_dsub+0x254>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff
 8001178:	ff7fffff 	.word	0xff7fffff

0800117c <__aeabi_d2iz>:
 800117c:	b530      	push	{r4, r5, lr}
 800117e:	4d14      	ldr	r5, [pc, #80]	; (80011d0 <__aeabi_d2iz+0x54>)
 8001180:	030a      	lsls	r2, r1, #12
 8001182:	004b      	lsls	r3, r1, #1
 8001184:	0b12      	lsrs	r2, r2, #12
 8001186:	0d5b      	lsrs	r3, r3, #21
 8001188:	0fc9      	lsrs	r1, r1, #31
 800118a:	2400      	movs	r4, #0
 800118c:	42ab      	cmp	r3, r5
 800118e:	dd11      	ble.n	80011b4 <__aeabi_d2iz+0x38>
 8001190:	4c10      	ldr	r4, [pc, #64]	; (80011d4 <__aeabi_d2iz+0x58>)
 8001192:	42a3      	cmp	r3, r4
 8001194:	dc10      	bgt.n	80011b8 <__aeabi_d2iz+0x3c>
 8001196:	2480      	movs	r4, #128	; 0x80
 8001198:	0364      	lsls	r4, r4, #13
 800119a:	4322      	orrs	r2, r4
 800119c:	4c0e      	ldr	r4, [pc, #56]	; (80011d8 <__aeabi_d2iz+0x5c>)
 800119e:	1ae4      	subs	r4, r4, r3
 80011a0:	2c1f      	cmp	r4, #31
 80011a2:	dd0c      	ble.n	80011be <__aeabi_d2iz+0x42>
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <__aeabi_d2iz+0x60>)
 80011a6:	1ac3      	subs	r3, r0, r3
 80011a8:	40da      	lsrs	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	425c      	negs	r4, r3
 80011ae:	2900      	cmp	r1, #0
 80011b0:	d100      	bne.n	80011b4 <__aeabi_d2iz+0x38>
 80011b2:	001c      	movs	r4, r3
 80011b4:	0020      	movs	r0, r4
 80011b6:	bd30      	pop	{r4, r5, pc}
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <__aeabi_d2iz+0x64>)
 80011ba:	18cc      	adds	r4, r1, r3
 80011bc:	e7fa      	b.n	80011b4 <__aeabi_d2iz+0x38>
 80011be:	4d09      	ldr	r5, [pc, #36]	; (80011e4 <__aeabi_d2iz+0x68>)
 80011c0:	40e0      	lsrs	r0, r4
 80011c2:	46ac      	mov	ip, r5
 80011c4:	4463      	add	r3, ip
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	4303      	orrs	r3, r0
 80011cc:	e7ee      	b.n	80011ac <__aeabi_d2iz+0x30>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	000003fe 	.word	0x000003fe
 80011d4:	0000041d 	.word	0x0000041d
 80011d8:	00000433 	.word	0x00000433
 80011dc:	00000413 	.word	0x00000413
 80011e0:	7fffffff 	.word	0x7fffffff
 80011e4:	fffffbed 	.word	0xfffffbed

080011e8 <__aeabi_i2d>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d02d      	beq.n	800124a <__aeabi_i2d+0x62>
 80011ee:	17c3      	asrs	r3, r0, #31
 80011f0:	18c5      	adds	r5, r0, r3
 80011f2:	405d      	eors	r5, r3
 80011f4:	0fc4      	lsrs	r4, r0, #31
 80011f6:	0028      	movs	r0, r5
 80011f8:	f000 f830 	bl	800125c <__clzsi2>
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <__aeabi_i2d+0x6c>)
 80011fe:	1a1b      	subs	r3, r3, r0
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	0d5b      	lsrs	r3, r3, #21
 8001204:	280a      	cmp	r0, #10
 8001206:	dd15      	ble.n	8001234 <__aeabi_i2d+0x4c>
 8001208:	380b      	subs	r0, #11
 800120a:	4085      	lsls	r5, r0
 800120c:	2200      	movs	r2, #0
 800120e:	032d      	lsls	r5, r5, #12
 8001210:	0b2d      	lsrs	r5, r5, #12
 8001212:	2100      	movs	r1, #0
 8001214:	0010      	movs	r0, r2
 8001216:	032d      	lsls	r5, r5, #12
 8001218:	0d0a      	lsrs	r2, r1, #20
 800121a:	0b2d      	lsrs	r5, r5, #12
 800121c:	0512      	lsls	r2, r2, #20
 800121e:	432a      	orrs	r2, r5
 8001220:	4d0d      	ldr	r5, [pc, #52]	; (8001258 <__aeabi_i2d+0x70>)
 8001222:	051b      	lsls	r3, r3, #20
 8001224:	402a      	ands	r2, r5
 8001226:	4313      	orrs	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	07e4      	lsls	r4, r4, #31
 800122c:	085b      	lsrs	r3, r3, #1
 800122e:	4323      	orrs	r3, r4
 8001230:	0019      	movs	r1, r3
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	0002      	movs	r2, r0
 8001236:	0029      	movs	r1, r5
 8001238:	3215      	adds	r2, #21
 800123a:	4091      	lsls	r1, r2
 800123c:	000a      	movs	r2, r1
 800123e:	210b      	movs	r1, #11
 8001240:	1a08      	subs	r0, r1, r0
 8001242:	40c5      	lsrs	r5, r0
 8001244:	032d      	lsls	r5, r5, #12
 8001246:	0b2d      	lsrs	r5, r5, #12
 8001248:	e7e3      	b.n	8001212 <__aeabi_i2d+0x2a>
 800124a:	2400      	movs	r4, #0
 800124c:	2300      	movs	r3, #0
 800124e:	2500      	movs	r5, #0
 8001250:	2200      	movs	r2, #0
 8001252:	e7de      	b.n	8001212 <__aeabi_i2d+0x2a>
 8001254:	0000041e 	.word	0x0000041e
 8001258:	800fffff 	.word	0x800fffff

0800125c <__clzsi2>:
 800125c:	211c      	movs	r1, #28
 800125e:	2301      	movs	r3, #1
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	4298      	cmp	r0, r3
 8001264:	d301      	bcc.n	800126a <__clzsi2+0xe>
 8001266:	0c00      	lsrs	r0, r0, #16
 8001268:	3910      	subs	r1, #16
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	4298      	cmp	r0, r3
 800126e:	d301      	bcc.n	8001274 <__clzsi2+0x18>
 8001270:	0a00      	lsrs	r0, r0, #8
 8001272:	3908      	subs	r1, #8
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	4298      	cmp	r0, r3
 8001278:	d301      	bcc.n	800127e <__clzsi2+0x22>
 800127a:	0900      	lsrs	r0, r0, #4
 800127c:	3904      	subs	r1, #4
 800127e:	a202      	add	r2, pc, #8	; (adr r2, 8001288 <__clzsi2+0x2c>)
 8001280:	5c10      	ldrb	r0, [r2, r0]
 8001282:	1840      	adds	r0, r0, r1
 8001284:	4770      	bx	lr
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	02020304 	.word	0x02020304
 800128c:	01010101 	.word	0x01010101
	...

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f000 fb6b 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f907 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 f997 	bl	80015d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012aa:	f000 f965 	bl	8001578 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_UART_Receive_IT(&huart1, (uint8_t*)str, 3); // receiving data
 80012ae:	4976      	ldr	r1, [pc, #472]	; (8001488 <main+0x1f0>)
 80012b0:	4b76      	ldr	r3, [pc, #472]	; (800148c <main+0x1f4>)
 80012b2:	2203      	movs	r2, #3
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fc39 	bl	8002b2c <HAL_UART_Receive_IT>

      /* cheack for ON or OFF */

      if(IsON((uint8_t*)str)) {
 80012ba:	4b73      	ldr	r3, [pc, #460]	; (8001488 <main+0x1f0>)
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f9d3 	bl	8001668 <IsON>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d006      	beq.n	80012d4 <main+0x3c>
        onn = 1;
 80012c6:	4b72      	ldr	r3, [pc, #456]	; (8001490 <main+0x1f8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
        off = 0;
 80012cc:	4b71      	ldr	r3, [pc, #452]	; (8001494 <main+0x1fc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e00b      	b.n	80012ec <main+0x54>
      } else if(IsOFF((uint8_t*)str)) {
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <main+0x1f0>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f9df 	bl	800169a <IsOFF>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d005      	beq.n	80012ec <main+0x54>
        onn = 0;
 80012e0:	4b6b      	ldr	r3, [pc, #428]	; (8001490 <main+0x1f8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
        off = 1;
 80012e6:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <main+0x1fc>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
      }


        /*checking for “frequency” or “quantity”*/
      if (onn == 1) {
 80012ec:	4b68      	ldr	r3, [pc, #416]	; (8001490 <main+0x1f8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d000      	beq.n	80012f6 <main+0x5e>
 80012f4:	e0a8      	b.n	8001448 <main+0x1b0>

      if(IsFR((uint8_t*)str)) {
 80012f6:	4b64      	ldr	r3, [pc, #400]	; (8001488 <main+0x1f0>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 f9e7 	bl	80016cc <IsFR>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d006      	beq.n	8001310 <main+0x78>
        f = 1;
 8001302:	4b65      	ldr	r3, [pc, #404]	; (8001498 <main+0x200>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
        q = 0;
 8001308:	4b64      	ldr	r3, [pc, #400]	; (800149c <main+0x204>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e01a      	b.n	8001346 <main+0xae>
      } else if(IsQ((uint8_t*)str)) {
 8001310:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <main+0x1f0>)
 8001312:	0018      	movs	r0, r3
 8001314:	f000 f9fc 	bl	8001710 <IsQ>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d006      	beq.n	800132a <main+0x92>
        q = 1;
 800131c:	4b5f      	ldr	r3, [pc, #380]	; (800149c <main+0x204>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
        f = 0;
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <main+0x200>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e00d      	b.n	8001346 <main+0xae>
      } else {
        for (int i = 0; i < 3; i ++) {
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e007      	b.n	8001340 <main+0xa8>
          str[i] = 0;
 8001330:	4a55      	ldr	r2, [pc, #340]	; (8001488 <main+0x1f0>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 3; i ++) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b02      	cmp	r3, #2
 8001344:	ddf4      	ble.n	8001330 <main+0x98>
        }
       }

      /*  frequency calculation */
        if(f == 1){
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <main+0x200>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d120      	bne.n	8001390 <main+0xf8>

        frequency=Number((uint8_t*)str);
 800134e:	4b4e      	ldr	r3, [pc, #312]	; (8001488 <main+0x1f0>)
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f9ff 	bl	8001754 <Number>
 8001356:	0003      	movs	r3, r0
 8001358:	000c      	movs	r4, r1
 800135a:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <main+0x208>)
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	6054      	str	r4, [r2, #4]

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // switch led
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <main+0x20c>)
 8001362:	2108      	movs	r1, #8
 8001364:	0018      	movs	r0, r3
 8001366:	f000 fe36 	bl	8001fd6 <HAL_GPIO_TogglePin>
        HAL_Delay(1000/frequency);       //delay
 800136a:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <main+0x208>)
 800136c:	685c      	ldr	r4, [r3, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	001a      	movs	r2, r3
 8001372:	0023      	movs	r3, r4
 8001374:	2000      	movs	r0, #0
 8001376:	494c      	ldr	r1, [pc, #304]	; (80014a8 <main+0x210>)
 8001378:	f7fe ffae 	bl	80002d8 <__aeabi_ddiv>
 800137c:	0003      	movs	r3, r0
 800137e:	000c      	movs	r4, r1
 8001380:	0018      	movs	r0, r3
 8001382:	0021      	movs	r1, r4
 8001384:	f7fe ff8a 	bl	800029c <__aeabi_d2uiz>
 8001388:	0003      	movs	r3, r0
 800138a:	0018      	movs	r0, r3
 800138c:	f000 fb58 	bl	8001a40 <HAL_Delay>
        }

        /* quantity calculation */
        if(q == 1){
 8001390:	4b42      	ldr	r3, [pc, #264]	; (800149c <main+0x204>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d149      	bne.n	800142c <main+0x194>

        quantity=Number((uint8_t*)str);
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <main+0x1f0>)
 800139a:	0018      	movs	r0, r3
 800139c:	f000 f9da 	bl	8001754 <Number>
 80013a0:	0003      	movs	r3, r0
 80013a2:	000c      	movs	r4, r1
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <main+0x214>)
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	6054      	str	r4, [r2, #4]

        for(int i =0; i < (quantity)-1; i++ )
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	e00c      	b.n	80013ca <main+0x132>
        {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <main+0x20c>)
 80013b2:	2108      	movs	r1, #8
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 fe0e 	bl	8001fd6 <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 80013ba:	2396      	movs	r3, #150	; 0x96
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fb3e 	bl	8001a40 <HAL_Delay>
        for(int i =0; i < (quantity)-1; i++ )
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f7ff ff0c 	bl	80011e8 <__aeabi_i2d>
 80013d0:	0004      	movs	r4, r0
 80013d2:	000d      	movs	r5, r1
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <main+0x214>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <main+0x218>)
 80013de:	f7ff fb85 	bl	8000aec <__aeabi_dsub>
 80013e2:	0002      	movs	r2, r0
 80013e4:	000b      	movs	r3, r1
 80013e6:	0020      	movs	r0, r4
 80013e8:	0029      	movs	r1, r5
 80013ea:	f7fe ff2f 	bl	800024c <__aeabi_dcmplt>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d1de      	bne.n	80013b0 <main+0x118>
        }

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //reset led3
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <main+0x20c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	2108      	movs	r1, #8
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 fdcf 	bl	8001f9c <HAL_GPIO_WritePin>
         for (int i = 0; i < 3; i ++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	e007      	b.n	8001414 <main+0x17c>
         str[i] = 0;
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <main+0x1f0>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
         for (int i = 0; i < 3; i ++) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	ddf4      	ble.n	8001404 <main+0x16c>
        }

        off = 1;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <main+0x1fc>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
        onn = 0;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <main+0x1f8>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
        q = 0;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <main+0x204>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
      }

      if (f==0) {
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <main+0x200>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d109      	bne.n	8001448 <main+0x1b0>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <main+0x20c>)
 8001436:	2108      	movs	r1, #8
 8001438:	0018      	movs	r0, r3
 800143a:	f000 fdcc 	bl	8001fd6 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 800143e:	23fa      	movs	r3, #250	; 0xfa
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fafc 	bl	8001a40 <HAL_Delay>
      }
      }

      //shutdown

      if (off == 1) {
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <main+0x1fc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d000      	beq.n	8001452 <main+0x1ba>
 8001450:	e72d      	b.n	80012ae <main+0x16>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <main+0x20c>)
 8001454:	2200      	movs	r2, #0
 8001456:	2108      	movs	r1, #8
 8001458:	0018      	movs	r0, r3
 800145a:	f000 fd9f 	bl	8001f9c <HAL_GPIO_WritePin>
      f = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <main+0x200>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 3; i ++) {
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	e007      	b.n	800147a <main+0x1e2>
      str[i] = 0;
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <main+0x1f0>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 3; i ++) {
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	ddf4      	ble.n	800146a <main+0x1d2>
        }
      off = 0;
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <main+0x1fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1, (uint8_t*)str, 3); // receiving data
 8001486:	e712      	b.n	80012ae <main+0x16>
 8001488:	200000d0 	.word	0x200000d0
 800148c:	2000004c 	.word	0x2000004c
 8001490:	20000038 	.word	0x20000038
 8001494:	200000cc 	.word	0x200000cc
 8001498:	20000048 	.word	0x20000048
 800149c:	2000002c 	.word	0x2000002c
 80014a0:	20000040 	.word	0x20000040
 80014a4:	48000400 	.word	0x48000400
 80014a8:	408f4000 	.word	0x408f4000
 80014ac:	20000030 	.word	0x20000030
 80014b0:	3ff00000 	.word	0x3ff00000

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b095      	sub	sp, #84	; 0x54
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	2420      	movs	r4, #32
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	0018      	movs	r0, r3
 80014c0:	2330      	movs	r3, #48	; 0x30
 80014c2:	001a      	movs	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	f002 f949 	bl	800375c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ca:	2310      	movs	r3, #16
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	0018      	movs	r0, r3
 80014d0:	2310      	movs	r3, #16
 80014d2:	001a      	movs	r2, r3
 80014d4:	2100      	movs	r1, #0
 80014d6:	f002 f941 	bl	800375c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014da:	003b      	movs	r3, r7
 80014dc:	0018      	movs	r0, r3
 80014de:	2310      	movs	r3, #16
 80014e0:	001a      	movs	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f002 f93a 	bl	800375c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e8:	0021      	movs	r1, r4
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2202      	movs	r2, #2
 80014ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2201      	movs	r2, #1
 80014f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2210      	movs	r2, #16
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2202      	movs	r2, #2
 8001500:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	22a0      	movs	r2, #160	; 0xa0
 800150c:	0392      	lsls	r2, r2, #14
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2200      	movs	r2, #0
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	187b      	adds	r3, r7, r1
 8001518:	0018      	movs	r0, r3
 800151a:	f000 fd77 	bl	800200c <HAL_RCC_OscConfig>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001522:	f000 f954 	bl	80017ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	2110      	movs	r1, #16
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2207      	movs	r2, #7
 800152c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2202      	movs	r2, #2
 8001532:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2101      	movs	r1, #1
 8001544:	0018      	movs	r0, r3
 8001546:	f001 f87d 	bl	8002644 <HAL_RCC_ClockConfig>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800154e:	f000 f93e 	bl	80017ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001552:	003b      	movs	r3, r7
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001558:	003b      	movs	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155e:	003b      	movs	r3, r7
 8001560:	0018      	movs	r0, r3
 8001562:	f001 f9c1 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800156a:	f000 f930 	bl	80017ce <Error_Handler>
  }
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b015      	add	sp, #84	; 0x54
 8001574:	bd90      	pop	{r4, r7, pc}
	...

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_USART1_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 8001584:	22e1      	movs	r2, #225	; 0xe1
 8001586:	0252      	lsls	r2, r2, #9
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <MX_USART1_UART_Init+0x58>)
 80015bc:	0018      	movs	r0, r3
 80015be:	f001 fa61 	bl	8002a84 <HAL_UART_Init>
 80015c2:	1e03      	subs	r3, r0, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f902 	bl	80017ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000004c 	.word	0x2000004c
 80015d4:	40013800 	.word	0x40013800

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	240c      	movs	r4, #12
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	0018      	movs	r0, r3
 80015e4:	2314      	movs	r3, #20
 80015e6:	001a      	movs	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	f002 f8b7 	bl	800375c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_GPIO_Init+0x88>)
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_GPIO_Init+0x88>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0289      	lsls	r1, r1, #10
 80015f8:	430a      	orrs	r2, r1
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_GPIO_Init+0x88>)
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	029b      	lsls	r3, r3, #10
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_GPIO_Init+0x88>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_GPIO_Init+0x88>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	02c9      	lsls	r1, r1, #11
 8001614:	430a      	orrs	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_GPIO_Init+0x88>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	4013      	ands	r3, r2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_GPIO_Init+0x8c>)
 8001628:	2200      	movs	r2, #0
 800162a:	2108      	movs	r1, #8
 800162c:	0018      	movs	r0, r3
 800162e:	f000 fcb5 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001632:	0021      	movs	r1, r4
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2208      	movs	r2, #8
 8001638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2201      	movs	r2, #1
 800163e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	187b      	adds	r3, r7, r1
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <MX_GPIO_Init+0x8c>)
 8001650:	0019      	movs	r1, r3
 8001652:	0010      	movs	r0, r2
 8001654:	f000 fb3a 	bl	8001ccc <HAL_GPIO_Init>

}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b009      	add	sp, #36	; 0x24
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400

08001668 <IsON>:

/* USER CODE BEGIN 4 */

BOOL IsON(uint8_t* str)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	return (BOOL)(str[0] == 0x6F && str[1] == 0x6E && str[2] == 0x6E);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b6f      	cmp	r3, #111	; 0x6f
 8001676:	d10b      	bne.n	8001690 <IsON+0x28>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b6e      	cmp	r3, #110	; 0x6e
 8001680:	d106      	bne.n	8001690 <IsON+0x28>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3302      	adds	r3, #2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b6e      	cmp	r3, #110	; 0x6e
 800168a:	d101      	bne.n	8001690 <IsON+0x28>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <IsON+0x2a>
 8001690:	2300      	movs	r3, #0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}

0800169a <IsOFF>:
BOOL IsOFF(uint8_t* str)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	return (BOOL)(str[0] == 0x6F && str[1] == 0x6E && str[2] == 0x6E);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b6f      	cmp	r3, #111	; 0x6f
 80016a8:	d10b      	bne.n	80016c2 <IsOFF+0x28>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b6e      	cmp	r3, #110	; 0x6e
 80016b2:	d106      	bne.n	80016c2 <IsOFF+0x28>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3302      	adds	r3, #2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b6e      	cmp	r3, #110	; 0x6e
 80016bc:	d101      	bne.n	80016c2 <IsOFF+0x28>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <IsOFF+0x2a>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <IsFR>:
BOOL IsFR(uint8_t* str)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	return (BOOL)(str[2] == 0x71 && (str[0] >= 0x30 && str[0] <= 0x39) && (str[1] >= 0x30 && str[1] <= 0x39));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3302      	adds	r3, #2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b71      	cmp	r3, #113	; 0x71
 80016dc:	d113      	bne.n	8001706 <IsFR+0x3a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b2f      	cmp	r3, #47	; 0x2f
 80016e4:	d90f      	bls.n	8001706 <IsFR+0x3a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b39      	cmp	r3, #57	; 0x39
 80016ec:	d80b      	bhi.n	8001706 <IsFR+0x3a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b2f      	cmp	r3, #47	; 0x2f
 80016f6:	d906      	bls.n	8001706 <IsFR+0x3a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b39      	cmp	r3, #57	; 0x39
 8001700:	d801      	bhi.n	8001706 <IsFR+0x3a>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <IsFR+0x3c>
 8001706:	2300      	movs	r3, #0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <IsQ>:
BOOL IsQ(uint8_t* str)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return (BOOL)(str[2] == 0x71 && (str[0] >= 0x30 && str[0] <= 0x39) && (str[1] >= 0x30 && str[1] <= 0x39));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3302      	adds	r3, #2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b71      	cmp	r3, #113	; 0x71
 8001720:	d113      	bne.n	800174a <IsQ+0x3a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b2f      	cmp	r3, #47	; 0x2f
 8001728:	d90f      	bls.n	800174a <IsQ+0x3a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b39      	cmp	r3, #57	; 0x39
 8001730:	d80b      	bhi.n	800174a <IsQ+0x3a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3301      	adds	r3, #1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b2f      	cmp	r3, #47	; 0x2f
 800173a:	d906      	bls.n	800174a <IsQ+0x3a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b39      	cmp	r3, #57	; 0x39
 8001744:	d801      	bhi.n	800174a <IsQ+0x3a>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <IsQ+0x3c>
 800174a:	2300      	movs	r3, #0
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <Number>:
double Number(uint8_t* str)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	double res = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	2400      	movs	r4, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	60fc      	str	r4, [r7, #12]
	if (str[0] == 0x30) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b30      	cmp	r3, #48	; 0x30
 800176a:	d10e      	bne.n	800178a <Number+0x36>
	        res = (str[1] - 48)*2;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3b30      	subs	r3, #48	; 0x30
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fd36 	bl	80011e8 <__aeabi_i2d>
 800177c:	0003      	movs	r3, r0
 800177e:	000c      	movs	r4, r1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	60fc      	str	r4, [r7, #12]
	        return res;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	68fc      	ldr	r4, [r7, #12]
 8001788:	e01c      	b.n	80017c4 <Number+0x70>
	}
	if (str[0] > 0x30){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b30      	cmp	r3, #48	; 0x30
 8001790:	d918      	bls.n	80017c4 <Number+0x70>
	        res = ((str[0] - 48)*10 + (str[1] - 48))*2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3b30      	subs	r3, #48	; 0x30
 8001798:	001a      	movs	r2, r3
 800179a:	0013      	movs	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	001a      	movs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3b30      	subs	r3, #48	; 0x30
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff fd19 	bl	80011e8 <__aeabi_i2d>
 80017b6:	0003      	movs	r3, r0
 80017b8:	000c      	movs	r4, r1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	60fc      	str	r4, [r7, #12]
	        return res;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	68fc      	ldr	r4, [r7, #12]
 80017c2:	e7ff      	b.n	80017c4 <Number+0x70>
	}
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	0021      	movs	r1, r4
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b005      	add	sp, #20
 80017cc:	bd90      	pop	{r4, r7, pc}

080017ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x44>)
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_MspInit+0x44>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_MspInit+0x44>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x44>)
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_MspInit+0x44>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_MspInit+0x44>)
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b002      	add	sp, #8
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	2314      	movs	r3, #20
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	0018      	movs	r0, r3
 800182e:	2314      	movs	r3, #20
 8001830:	001a      	movs	r2, r3
 8001832:	2100      	movs	r1, #0
 8001834:	f001 ff92 	bl	800375c <memset>
  if(huart->Instance==USART1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_UART_MspInit+0xa0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d13a      	bne.n	80018b8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_UART_MspInit+0xa4>)
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_UART_MspInit+0xa4>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	01c9      	lsls	r1, r1, #7
 800184c:	430a      	orrs	r2, r1
 800184e:	619a      	str	r2, [r3, #24]
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_UART_MspInit+0xa4>)
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	01db      	lsls	r3, r3, #7
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0xa4>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_UART_MspInit+0xa4>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0289      	lsls	r1, r1, #10
 8001868:	430a      	orrs	r2, r1
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_UART_MspInit+0xa4>)
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	029b      	lsls	r3, r3, #10
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800187a:	2114      	movs	r1, #20
 800187c:	187b      	adds	r3, r7, r1
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <HAL_UART_MspInit+0xa8>)
 8001880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	187b      	adds	r3, r7, r1
 8001884:	2202      	movs	r2, #2
 8001886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	187b      	adds	r3, r7, r1
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188e:	187b      	adds	r3, r7, r1
 8001890:	2203      	movs	r2, #3
 8001892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001894:	187b      	adds	r3, r7, r1
 8001896:	2201      	movs	r2, #1
 8001898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	187a      	adds	r2, r7, r1
 800189c:	2390      	movs	r3, #144	; 0x90
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	0011      	movs	r1, r2
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 fa12 	bl	8001ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	201b      	movs	r0, #27
 80018ae:	f000 f995 	bl	8001bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018b2:	201b      	movs	r0, #27
 80018b4:	f000 f9a7 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b00a      	add	sp, #40	; 0x28
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	00008004 	.word	0x00008004

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f888 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <USART1_IRQHandler+0x14>)
 8001906:	0018      	movs	r0, r3
 8001908:	f001 f9b4 	bl	8002c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	2000004c 	.word	0x2000004c

08001918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001926:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490e      	ldr	r1, [pc, #56]	; (8001964 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0b      	ldr	r4, [pc, #44]	; (8001970 <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800194e:	f7ff ffe3 	bl	8001918 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001952:	f001 fedf 	bl	8003714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff fc9f 	bl	8001298 <main>

0800195a <LoopForever>:

LoopForever:
    b LoopForever
 800195a:	e7fe      	b.n	800195a <LoopForever>
  ldr   r0, =_estack
 800195c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001968:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 800196c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001970:	200000d8 	.word	0x200000d8

08001974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_IRQHandler>
	...

08001978 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_Init+0x24>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_Init+0x24>)
 8001982:	2110      	movs	r1, #16
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f809 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198e:	f7ff ff23 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_InitTick+0x5c>)
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_InitTick+0x60>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	0019      	movs	r1, r3
 80019b2:	23fa      	movs	r3, #250	; 0xfa
 80019b4:	0098      	lsls	r0, r3, #2
 80019b6:	f7fe fba7 	bl	8000108 <__udivsi3>
 80019ba:	0003      	movs	r3, r0
 80019bc:	0019      	movs	r1, r3
 80019be:	0020      	movs	r0, r4
 80019c0:	f7fe fba2 	bl	8000108 <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f92d 	bl	8001c26 <HAL_SYSTICK_Config>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00f      	b.n	80019f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d80b      	bhi.n	80019f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	2301      	movs	r3, #1
 80019de:	425b      	negs	r3, r3
 80019e0:	2200      	movs	r2, #0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f8fa 	bl	8001bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_InitTick+0x64>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b003      	add	sp, #12
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	001a      	movs	r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x20>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	18d2      	adds	r2, r2, r3
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_IncTick+0x20>)
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	20000008 	.word	0x20000008
 8001a28:	200000d4 	.word	0x200000d4

08001a2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_GetTick+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	200000d4 	.word	0x200000d4

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fff0 	bl	8001a2c <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_Delay+0x40>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	001a      	movs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	189b      	adds	r3, r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	f7ff ffe0 	bl	8001a2c <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000008 	.word	0x20000008

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b7f      	cmp	r3, #127	; 0x7f
 8001a96:	d809      	bhi.n	8001aac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	231f      	movs	r3, #31
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_EnableIRQ+0x30>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4091      	lsls	r1, r2
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
  }
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	0002      	movs	r2, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7f      	cmp	r3, #127	; 0x7f
 8001acc:	d828      	bhi.n	8001b20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <__NVIC_SetPriority+0xd4>)
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	33c0      	adds	r3, #192	; 0xc0
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	589b      	ldr	r3, [r3, r2]
 8001ade:	1dfa      	adds	r2, r7, #7
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	00d2      	lsls	r2, r2, #3
 8001aea:	21ff      	movs	r1, #255	; 0xff
 8001aec:	4091      	lsls	r1, r2
 8001aee:	000a      	movs	r2, r1
 8001af0:	43d2      	mvns	r2, r2
 8001af2:	401a      	ands	r2, r3
 8001af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	22ff      	movs	r2, #255	; 0xff
 8001afc:	401a      	ands	r2, r3
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	0018      	movs	r0, r3
 8001b04:	2303      	movs	r3, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <__NVIC_SetPriority+0xd4>)
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	430a      	orrs	r2, r1
 8001b18:	33c0      	adds	r3, #192	; 0xc0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b1e:	e031      	b.n	8001b84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <__NVIC_SetPriority+0xd8>)
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	0019      	movs	r1, r3
 8001b28:	230f      	movs	r3, #15
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	3b08      	subs	r3, #8
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3306      	adds	r3, #6
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	3304      	adds	r3, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1dfa      	adds	r2, r7, #7
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	0011      	movs	r1, r2
 8001b40:	2203      	movs	r2, #3
 8001b42:	400a      	ands	r2, r1
 8001b44:	00d2      	lsls	r2, r2, #3
 8001b46:	21ff      	movs	r1, #255	; 0xff
 8001b48:	4091      	lsls	r1, r2
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	43d2      	mvns	r2, r2
 8001b4e:	401a      	ands	r2, r3
 8001b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	22ff      	movs	r2, #255	; 0xff
 8001b58:	401a      	ands	r2, r3
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	2303      	movs	r3, #3
 8001b62:	4003      	ands	r3, r0
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <__NVIC_SetPriority+0xd8>)
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	001c      	movs	r4, r3
 8001b70:	230f      	movs	r3, #15
 8001b72:	4023      	ands	r3, r4
 8001b74:	3b08      	subs	r3, #8
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	3306      	adds	r3, #6
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	18c3      	adds	r3, r0, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b003      	add	sp, #12
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <SysTick_Config+0x40>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e010      	b.n	8001bcc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <SysTick_Config+0x44>)
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff ff7d 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SysTick_Config+0x44>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x44>)
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	00ffffff 	.word	0x00ffffff
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	210f      	movs	r1, #15
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	1c02      	adds	r2, r0, #0
 8001bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff ff33 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff ffaf 	bl	8001b94 <SysTick_Config>
 8001c36:	0003      	movs	r3, r0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c48:	230f      	movs	r3, #15
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2221      	movs	r2, #33	; 0x21
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d007      	beq.n	8001c6c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c62:	230f      	movs	r3, #15
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e028      	b.n	8001cbe <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	210e      	movs	r1, #14
 8001c78:	438a      	bics	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2101      	movs	r1, #1
 8001c96:	4091      	lsls	r1, r2
 8001c98:	000a      	movs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2221      	movs	r2, #33	; 0x21
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	0010      	movs	r0, r2
 8001cbc:	4798      	blx	r3
    } 
  }
  return status;
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cda:	e149      	b.n	8001f70 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4091      	lsls	r1, r2
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d100      	bne.n	8001cf4 <HAL_GPIO_Init+0x28>
 8001cf2:	e13a      	b.n	8001f6a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x38>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b12      	cmp	r3, #18
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	58d3      	ldr	r3, [r2, r3]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2207      	movs	r2, #7
 8001d16:	4013      	ands	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	43da      	mvns	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2107      	movs	r1, #7
 8001d30:	400b      	ands	r3, r1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	6939      	ldr	r1, [r7, #16]
 8001d4a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	0013      	movs	r3, r2
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d00b      	beq.n	8001da0 <HAL_GPIO_Init+0xd4>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d007      	beq.n	8001da0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d94:	2b11      	cmp	r3, #17
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b12      	cmp	r3, #18
 8001d9e:	d130      	bne.n	8001e02 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	409a      	lsls	r2, r3
 8001dae:	0013      	movs	r3, r2
 8001db0:	43da      	mvns	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	43da      	mvns	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	2201      	movs	r2, #1
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	43da      	mvns	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	409a      	lsls	r2, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	055b      	lsls	r3, r3, #21
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d100      	bne.n	8001e40 <HAL_GPIO_Init+0x174>
 8001e3e:	e094      	b.n	8001f6a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e40:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_GPIO_Init+0x2bc>)
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_GPIO_Init+0x2bc>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	619a      	str	r2, [r3, #24]
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x2bc>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e58:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_GPIO_Init+0x2c0>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	589b      	ldr	r3, [r3, r2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2203      	movs	r2, #3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	43da      	mvns	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	2390      	movs	r3, #144	; 0x90
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x1d6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_GPIO_Init+0x2c4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x1d2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_GPIO_Init+0x2c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x1ce>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x1d8>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x1d8>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x1d8>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb4:	4935      	ldr	r1, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x2c0>)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec2:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	025b      	lsls	r3, r3, #9
 8001eda:	4013      	ands	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	4013      	ands	r3, r2
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	035b      	lsls	r3, r3, #13
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	039b      	lsls	r3, r3, #14
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	40da      	lsrs	r2, r3
 8001f78:	1e13      	subs	r3, r2, #0
 8001f7a:	d000      	beq.n	8001f7e <HAL_GPIO_Init+0x2b2>
 8001f7c:	e6ae      	b.n	8001cdc <HAL_GPIO_Init+0x10>
  } 
}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	0008      	movs	r0, r1
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	1cbb      	adds	r3, r7, #2
 8001faa:	1c02      	adds	r2, r0, #0
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	1c7b      	adds	r3, r7, #1
 8001fb0:	1c0a      	adds	r2, r1, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb4:	1c7b      	adds	r3, r7, #1
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbc:	1cbb      	adds	r3, r7, #2
 8001fbe:	881a      	ldrh	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc6:	1cbb      	adds	r3, r7, #2
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	000a      	movs	r2, r1
 8001fe0:	1cbb      	adds	r3, r7, #2
 8001fe2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	1cba      	adds	r2, r7, #2
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	4013      	ands	r3, r2
 8001fee:	d005      	beq.n	8001ffc <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ff0:	1cbb      	adds	r3, r7, #2
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001ffa:	e003      	b.n	8002004 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffc:	1cbb      	adds	r3, r7, #2
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e303      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x1e>
 8002028:	e08d      	b.n	8002146 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800202a:	4bc4      	ldr	r3, [pc, #784]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	220c      	movs	r2, #12
 8002030:	4013      	ands	r3, r2
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00e      	beq.n	8002054 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002036:	4bc1      	ldr	r3, [pc, #772]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	220c      	movs	r2, #12
 800203c:	4013      	ands	r3, r2
 800203e:	2b08      	cmp	r3, #8
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x64>
 8002042:	4bbe      	ldr	r3, [pc, #760]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	401a      	ands	r2, r3
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	025b      	lsls	r3, r3, #9
 8002050:	429a      	cmp	r2, r3
 8002052:	d10d      	bne.n	8002070 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4bb9      	ldr	r3, [pc, #740]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x56>
 8002060:	e070      	b.n	8002144 <HAL_RCC_OscConfig+0x138>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d000      	beq.n	800206c <HAL_RCC_OscConfig+0x60>
 800206a:	e06b      	b.n	8002144 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e2da      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x7c>
 8002078:	4bb0      	ldr	r3, [pc, #704]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4baf      	ldr	r3, [pc, #700]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0249      	lsls	r1, r1, #9
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e02f      	b.n	80020e8 <HAL_RCC_OscConfig+0xdc>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x9e>
 8002090:	4baa      	ldr	r3, [pc, #680]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4ba9      	ldr	r3, [pc, #676]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002096:	49aa      	ldr	r1, [pc, #680]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	4ba7      	ldr	r3, [pc, #668]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4ba6      	ldr	r3, [pc, #664]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020a2:	49a8      	ldr	r1, [pc, #672]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e01e      	b.n	80020e8 <HAL_RCC_OscConfig+0xdc>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d10e      	bne.n	80020d0 <HAL_RCC_OscConfig+0xc4>
 80020b2:	4ba2      	ldr	r3, [pc, #648]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4ba1      	ldr	r3, [pc, #644]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	02c9      	lsls	r1, r1, #11
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	4b9e      	ldr	r3, [pc, #632]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b9d      	ldr	r3, [pc, #628]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0249      	lsls	r1, r1, #9
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xdc>
 80020d0:	4b9a      	ldr	r3, [pc, #616]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b99      	ldr	r3, [pc, #612]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020d6:	499a      	ldr	r1, [pc, #616]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4b97      	ldr	r3, [pc, #604]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b96      	ldr	r3, [pc, #600]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020e2:	4998      	ldr	r1, [pc, #608]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d014      	beq.n	800211a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fc9c 	bl	8001a2c <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fa:	f7ff fc97 	bl	8001a2c <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e28c      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0xee>
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fc87 	bl	8001a2c <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fc82 	bl	8001a2c <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e277      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	4013      	ands	r3, r2
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x118>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d100      	bne.n	8002152 <HAL_RCC_OscConfig+0x146>
 8002150:	e069      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002152:	4b7a      	ldr	r3, [pc, #488]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	220c      	movs	r2, #12
 8002158:	4013      	ands	r3, r2
 800215a:	d00b      	beq.n	8002174 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800215c:	4b77      	ldr	r3, [pc, #476]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	2b08      	cmp	r3, #8
 8002166:	d11c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x196>
 8002168:	4b74      	ldr	r3, [pc, #464]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	4013      	ands	r3, r2
 8002172:	d116      	bne.n	80021a2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002174:	4b71      	ldr	r3, [pc, #452]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24d      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	22f8      	movs	r2, #248	; 0xf8
 8002190:	4393      	bics	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00da      	lsls	r2, r3, #3
 800219a:	4b68      	ldr	r3, [pc, #416]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a0:	e041      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d024      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021aa:	4b64      	ldr	r3, [pc, #400]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff fc39 	bl	8001a2c <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff fc34 	bl	8001a2c <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e229      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b5a      	ldr	r3, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b57      	ldr	r3, [pc, #348]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	22f8      	movs	r2, #248	; 0xf8
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e018      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f4:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fc14 	bl	8001a2c <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fc0f 	bl	8001a2c <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e204      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d1f1      	bne.n	800220a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2208      	movs	r2, #8
 800222c:	4013      	ands	r3, r2
 800222e:	d036      	beq.n	800229e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d019      	beq.n	800226c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800223a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800223e:	2101      	movs	r1, #1
 8002240:	430a      	orrs	r2, r1
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fbf2 	bl	8001a2c <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224e:	f7ff fbed 	bl	8001a2c <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1e2      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d0f1      	beq.n	800224e <HAL_RCC_OscConfig+0x242>
 800226a:	e018      	b.n	800229e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fbd8 	bl	8001a2c <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002282:	f7ff fbd3 	bl	8001a2c <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1c8      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d1f1      	bne.n	8002282 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2204      	movs	r2, #4
 80022a4:	4013      	ands	r3, r2
 80022a6:	d100      	bne.n	80022aa <HAL_RCC_OscConfig+0x29e>
 80022a8:	e0b6      	b.n	8002418 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	231f      	movs	r3, #31
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	4013      	ands	r3, r2
 80022bc:	d111      	bne.n	80022e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0549      	lsls	r1, r1, #21
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022da:	231f      	movs	r3, #31
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	d11a      	bne.n	8002324 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	0049      	lsls	r1, r1, #1
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fb96 	bl	8001a2c <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff fb91 	bl	8001a2c <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e186      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10f      	bne.n	800234c <HAL_RCC_OscConfig+0x340>
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_RCC_OscConfig+0x330>)
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002332:	2101      	movs	r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e036      	b.n	80023a8 <HAL_RCC_OscConfig+0x39c>
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	40021000 	.word	0x40021000
 8002340:	fffeffff 	.word	0xfffeffff
 8002344:	fffbffff 	.word	0xfffbffff
 8002348:	40007000 	.word	0x40007000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x362>
 8002354:	4bb6      	ldr	r3, [pc, #728]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	4bb5      	ldr	r3, [pc, #724]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800235a:	2101      	movs	r1, #1
 800235c:	438a      	bics	r2, r1
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	4bb3      	ldr	r3, [pc, #716]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	4bb2      	ldr	r3, [pc, #712]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002366:	2104      	movs	r1, #4
 8002368:	438a      	bics	r2, r1
 800236a:	621a      	str	r2, [r3, #32]
 800236c:	e01c      	b.n	80023a8 <HAL_RCC_OscConfig+0x39c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x384>
 8002376:	4bae      	ldr	r3, [pc, #696]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	4bad      	ldr	r3, [pc, #692]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800237c:	2104      	movs	r1, #4
 800237e:	430a      	orrs	r2, r1
 8002380:	621a      	str	r2, [r3, #32]
 8002382:	4bab      	ldr	r3, [pc, #684]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	4baa      	ldr	r3, [pc, #680]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002388:	2101      	movs	r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	621a      	str	r2, [r3, #32]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x39c>
 8002390:	4ba7      	ldr	r3, [pc, #668]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4ba6      	ldr	r3, [pc, #664]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002396:	2101      	movs	r1, #1
 8002398:	438a      	bics	r2, r1
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	4ba4      	ldr	r3, [pc, #656]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	4ba3      	ldr	r3, [pc, #652]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80023a2:	2104      	movs	r1, #4
 80023a4:	438a      	bics	r2, r1
 80023a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d014      	beq.n	80023da <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7ff fb3c 	bl	8001a2c <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e009      	b.n	80023ce <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff fb37 	bl	8001a2c <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	4a9b      	ldr	r2, [pc, #620]	; (8002634 <HAL_RCC_OscConfig+0x628>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e12b      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	4b98      	ldr	r3, [pc, #608]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x3ae>
 80023d8:	e013      	b.n	8002402 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7ff fb27 	bl	8001a2c <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	e009      	b.n	80023f8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7ff fb22 	bl	8001a2c <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	4a91      	ldr	r2, [pc, #580]	; (8002634 <HAL_RCC_OscConfig+0x628>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e116      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	4b8d      	ldr	r3, [pc, #564]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	2202      	movs	r2, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002402:	231f      	movs	r3, #31
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	4b87      	ldr	r3, [pc, #540]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002412:	4989      	ldr	r1, [pc, #548]	; (8002638 <HAL_RCC_OscConfig+0x62c>)
 8002414:	400a      	ands	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	4013      	ands	r3, r2
 8002420:	d063      	beq.n	80024ea <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d12a      	bne.n	8002480 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800242a:	4b81      	ldr	r3, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800242c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242e:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002430:	2104      	movs	r1, #4
 8002432:	430a      	orrs	r2, r1
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002436:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	4b7d      	ldr	r3, [pc, #500]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800243c:	2101      	movs	r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff faf3 	bl	8001a2c <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800244c:	f7ff faee 	bl	8001a2c <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0e3      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800245e:	4b74      	ldr	r3, [pc, #464]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d0f1      	beq.n	800244c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	22f8      	movs	r2, #248	; 0xf8
 800246e:	4393      	bics	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	00da      	lsls	r2, r3, #3
 8002478:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
 800247e:	e034      	b.n	80024ea <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	3305      	adds	r3, #5
 8002486:	d111      	bne.n	80024ac <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002488:	4b69      	ldr	r3, [pc, #420]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800248a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800248e:	2104      	movs	r1, #4
 8002490:	438a      	bics	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002494:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	22f8      	movs	r2, #248	; 0xf8
 800249a:	4393      	bics	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	00da      	lsls	r2, r3, #3
 80024a4:	4b62      	ldr	r3, [pc, #392]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
 80024aa:	e01e      	b.n	80024ea <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024ac:	4b60      	ldr	r3, [pc, #384]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b0:	4b5f      	ldr	r3, [pc, #380]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024b2:	2104      	movs	r1, #4
 80024b4:	430a      	orrs	r2, r1
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024bc:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024be:	2101      	movs	r1, #1
 80024c0:	438a      	bics	r2, r1
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7ff fab2 	bl	8001a2c <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024ce:	f7ff faad 	bl	8001a2c <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0a2      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f1      	bne.n	80024ce <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d100      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4e8>
 80024f2:	e097      	b.n	8002624 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	4b4e      	ldr	r3, [pc, #312]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	220c      	movs	r2, #12
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x4f6>
 8002500:	e06b      	b.n	80025da <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d14c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002510:	494a      	ldr	r1, [pc, #296]	; (800263c <HAL_RCC_OscConfig+0x630>)
 8002512:	400a      	ands	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fa89 	bl	8001a2c <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7ff fa84 	bl	8001a2c <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e079      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	049b      	lsls	r3, r3, #18
 800253a:	4013      	ands	r3, r2
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253e:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	220f      	movs	r2, #15
 8002544:	4393      	bics	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800254e:	430a      	orrs	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a3a      	ldr	r2, [pc, #232]	; (8002640 <HAL_RCC_OscConfig+0x634>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	431a      	orrs	r2, r3
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	0449      	lsls	r1, r1, #17
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7ff fa57 	bl	8001a2c <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7ff fa52 	bl	8001a2c <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e047      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	049b      	lsls	r3, r3, #18
 800259e:	4013      	ands	r3, r2
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x578>
 80025a2:	e03f      	b.n	8002624 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80025aa:	4924      	ldr	r1, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x630>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fa3c 	bl	8001a2c <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff fa37 	bl	8001a2c <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e02c      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	049b      	lsls	r3, r3, #18
 80025d4:	4013      	ands	r3, r2
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x5ae>
 80025d8:	e024      	b.n	8002624 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01f      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	025b      	lsls	r3, r3, #9
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10e      	bne.n	8002620 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	220f      	movs	r2, #15
 8002606:	401a      	ands	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	23f0      	movs	r3, #240	; 0xf0
 8002614:	039b      	lsls	r3, r3, #14
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b008      	add	sp, #32
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40021000 	.word	0x40021000
 8002634:	00001388 	.word	0x00001388
 8002638:	efffffff 	.word	0xefffffff
 800263c:	feffffff 	.word	0xfeffffff
 8002640:	ffc2ffff 	.word	0xffc2ffff

08002644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b3      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d911      	bls.n	800268a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	4393      	bics	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d001      	beq.n	800268a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e09a      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d015      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2204      	movs	r2, #4
 800269a:	4013      	ands	r3, r2
 800269c:	d006      	beq.n	80026ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026a4:	21e0      	movs	r1, #224	; 0xe0
 80026a6:	00c9      	lsls	r1, r1, #3
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	22f0      	movs	r2, #240	; 0xf0
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	029b      	lsls	r3, r3, #10
 80026da:	4013      	ands	r3, r2
 80026dc:	d114      	bne.n	8002708 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06e      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	049b      	lsls	r3, r3, #18
 80026f2:	4013      	ands	r3, r2
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e062      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e05b      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002708:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	4393      	bics	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7ff f986 	bl	8001a2c <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002724:	e009      	b.n	800273a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002726:	f7ff f981 	bl	8001a2c <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_RCC_ClockConfig+0x18c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e042      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	220c      	movs	r2, #12
 8002740:	401a      	ands	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1ec      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d211      	bcs.n	800277e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	4393      	bics	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCC_ClockConfig+0x184>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e020      	b.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2204      	movs	r2, #4
 8002784:	4013      	ands	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_RCC_ClockConfig+0x190>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800279c:	f000 f820 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 80027a0:	0001      	movs	r1, r0
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x188>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	220f      	movs	r2, #15
 80027aa:	4013      	ands	r3, r2
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x194>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	000a      	movs	r2, r1
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x198>)
 80027b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff f8f1 	bl	80019a0 <HAL_InitTick>
  
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	00001388 	.word	0x00001388
 80027d4:	fffff8ff 	.word	0xfffff8ff
 80027d8:	080037e4 	.word	0x080037e4
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b08f      	sub	sp, #60	; 0x3c
 80027e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80027e6:	2314      	movs	r3, #20
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027ee:	c313      	stmia	r3!, {r0, r1, r4}
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027fa:	c313      	stmia	r3!, {r0, r1, r4}
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002804:	2300      	movs	r3, #0
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
 8002808:	2300      	movs	r3, #0
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	220c      	movs	r2, #12
 800281e:	4013      	ands	r3, r2
 8002820:	2b04      	cmp	r3, #4
 8002822:	d002      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x4a>
 8002824:	2b08      	cmp	r3, #8
 8002826:	d003      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x50>
 8002828:	e02d      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800282e:	e02d      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	220f      	movs	r2, #15
 8002836:	4013      	ands	r3, r2
 8002838:	2214      	movs	r2, #20
 800283a:	18ba      	adds	r2, r7, r2
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	220f      	movs	r2, #15
 8002846:	4013      	ands	r3, r2
 8002848:	1d3a      	adds	r2, r7, #4
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	025b      	lsls	r3, r3, #9
 8002854:	4013      	ands	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	4812      	ldr	r0, [pc, #72]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800285c:	f7fd fc54 	bl	8000108 <__udivsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	001a      	movs	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	4353      	muls	r3, r2
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
 800286a:	e009      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800286c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286e:	000a      	movs	r2, r1
 8002870:	0152      	lsls	r2, r2, #5
 8002872:	1a52      	subs	r2, r2, r1
 8002874:	0193      	lsls	r3, r2, #6
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	185b      	adds	r3, r3, r1
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002884:	e002      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800288a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b00f      	add	sp, #60	; 0x3c
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	08003784 	.word	0x08003784
 800289c:	08003794 	.word	0x08003794
 80028a0:	40021000 	.word	0x40021000
 80028a4:	007a1200 	.word	0x007a1200

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	20000000 	.word	0x20000000

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80028c0:	f7ff fff2 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c4:	0001      	movs	r1, r0
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	2207      	movs	r2, #7
 80028ce:	4013      	ands	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	40d9      	lsrs	r1, r3
 80028d6:	000b      	movs	r3, r1
}    
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080037f4 	.word	0x080037f4

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	025b      	lsls	r3, r3, #9
 8002900:	4013      	ands	r3, r2
 8002902:	d100      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002904:	e08f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2317      	movs	r3, #23
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	055b      	lsls	r3, r3, #21
 8002916:	4013      	ands	r3, r2
 8002918:	d111      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0549      	lsls	r1, r1, #21
 8002924:	430a      	orrs	r2, r1
 8002926:	61da      	str	r2, [r3, #28]
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	055b      	lsls	r3, r3, #21
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2317      	movs	r3, #23
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4013      	ands	r3, r2
 8002948:	d11a      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0049      	lsls	r1, r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002958:	f7ff f868 	bl	8001a2c <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7ff f863 	bl	8001a2c <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	d901      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e077      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4013      	ands	r3, r2
 800297e:	d0f0      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002980:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d034      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	23c0      	movs	r3, #192	; 0xc0
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4013      	ands	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d02c      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a2:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a33      	ldr	r2, [pc, #204]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	0249      	lsls	r1, r1, #9
 80029b6:	430a      	orrs	r2, r1
 80029b8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c0:	492d      	ldr	r1, [pc, #180]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff f82a 	bl	8001a2c <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e009      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7ff f825 	bl	8001a2c <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e038      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d0f0      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a10:	2317      	movs	r3, #23
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a20:	4917      	ldr	r1, [pc, #92]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	2203      	movs	r2, #3
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	2210      	movs	r2, #16
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b006      	add	sp, #24
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	fffffcff 	.word	0xfffffcff
 8002a78:	fffeffff 	.word	0xfffeffff
 8002a7c:	00001388 	.word	0x00001388
 8002a80:	efffffff 	.word	0xefffffff

08002a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e044      	b.n	8002b20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2270      	movs	r2, #112	; 0x70
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7fe feb9 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2224      	movs	r2, #36	; 0x24
 8002ab2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 fa28 	bl	8002f1c <UART_SetConfig>
 8002acc:	0003      	movs	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e024      	b.n	8002b20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 fb89 	bl	80031f8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	490d      	ldr	r1, [pc, #52]	; (8002b28 <HAL_UART_Init+0xa4>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	212a      	movs	r1, #42	; 0x2a
 8002b02:	438a      	bics	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fc21 	bl	8003360 <UART_CheckIdleState>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	ffffb7ff 	.word	0xffffb7ff

08002b2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	1dbb      	adds	r3, r7, #6
 8002b38:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d000      	beq.n	8002b44 <HAL_UART_Receive_IT+0x18>
 8002b42:	e08b      	b.n	8002c5c <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_Receive_IT+0x26>
 8002b4a:	1dbb      	adds	r3, r7, #6
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e083      	b.n	8002c5e <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	015b      	lsls	r3, r3, #5
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d109      	bne.n	8002b76 <HAL_UART_Receive_IT+0x4a>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d001      	beq.n	8002b76 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e073      	b.n	8002c5e <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2270      	movs	r2, #112	; 0x70
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_UART_Receive_IT+0x58>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e06c      	b.n	8002c5e <HAL_UART_Receive_IT+0x132>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2270      	movs	r2, #112	; 0x70
 8002b88:	2101      	movs	r1, #1
 8002b8a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1dba      	adds	r2, r7, #6
 8002b96:	2158      	movs	r1, #88	; 0x58
 8002b98:	8812      	ldrh	r2, [r2, #0]
 8002b9a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1dba      	adds	r2, r7, #6
 8002ba0:	215a      	movs	r1, #90	; 0x5a
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	015b      	lsls	r3, r3, #5
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_UART_Receive_IT+0xa8>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_UART_Receive_IT+0x9e>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	225c      	movs	r2, #92	; 0x5c
 8002bc4:	4928      	ldr	r1, [pc, #160]	; (8002c68 <HAL_UART_Receive_IT+0x13c>)
 8002bc6:	5299      	strh	r1, [r3, r2]
 8002bc8:	e01a      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	225c      	movs	r2, #92	; 0x5c
 8002bce:	21ff      	movs	r1, #255	; 0xff
 8002bd0:	5299      	strh	r1, [r3, r2]
 8002bd2:	e015      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_UART_Receive_IT+0xcc>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_UART_Receive_IT+0xc2>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	225c      	movs	r2, #92	; 0x5c
 8002be8:	21ff      	movs	r1, #255	; 0xff
 8002bea:	5299      	strh	r1, [r3, r2]
 8002bec:	e008      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	225c      	movs	r2, #92	; 0x5c
 8002bf2:	217f      	movs	r1, #127	; 0x7f
 8002bf4:	5299      	strh	r1, [r3, r2]
 8002bf6:	e003      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	225c      	movs	r2, #92	; 0x5c
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2222      	movs	r2, #34	; 0x22
 8002c0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_UART_Receive_IT+0x10c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_UART_Receive_IT+0x140>)
 8002c34:	661a      	str	r2, [r3, #96]	; 0x60
 8002c36:	e002      	b.n	8002c3e <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_UART_Receive_IT+0x144>)
 8002c3c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2270      	movs	r2, #112	; 0x70
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2190      	movs	r1, #144	; 0x90
 8002c52:	0049      	lsls	r1, r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	000001ff 	.word	0x000001ff
 8002c6c:	08003649 	.word	0x08003649
 8002c70:	0800358d 	.word	0x0800358d

08002c74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4a93      	ldr	r2, [pc, #588]	; (8002ee4 <HAL_UART_IRQHandler+0x270>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d112      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2220      	movs	r2, #32
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d100      	bne.n	8002cbc <HAL_UART_IRQHandler+0x48>
 8002cba:	e10b      	b.n	8002ed4 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	4798      	blx	r3
      }
      return;
 8002cc6:	e105      	b.n	8002ed4 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d100      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x5c>
 8002cce:	e0cd      	b.n	8002e6c <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d105      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	2390      	movs	r3, #144	; 0x90
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d100      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x70>
 8002ce2:	e0c3      	b.n	8002e6c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00e      	beq.n	8002d0a <HAL_UART_IRQHandler+0x96>
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d02:	2201      	movs	r2, #1
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <HAL_UART_IRQHandler+0xba>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d26:	2204      	movs	r2, #4
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_UART_IRQHandler+0xde>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2208      	movs	r2, #8
 8002d56:	4013      	ands	r3, r2
 8002d58:	d011      	beq.n	8002d7e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d103      	bne.n	8002d6a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2201      	movs	r2, #1
 8002d66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d68:	d009      	beq.n	8002d7e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d76:	2208      	movs	r2, #8
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00f      	beq.n	8002da8 <HAL_UART_IRQHandler+0x134>
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	04db      	lsls	r3, r3, #19
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d00a      	beq.n	8002da8 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da0:	2220      	movs	r2, #32
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d100      	bne.n	8002db2 <HAL_UART_IRQHandler+0x13e>
 8002db0:	e092      	b.n	8002ed8 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d00c      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d008      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	0010      	movs	r0, r2
 8002dd2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2240      	movs	r2, #64	; 0x40
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d003      	beq.n	8002df0 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2228      	movs	r2, #40	; 0x28
 8002dec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dee:	d033      	beq.n	8002e58 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 fb78 	bl	80034e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d123      	bne.n	8002e4e <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	438a      	bics	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e22:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <HAL_UART_IRQHandler+0x274>)
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7fe ff08 	bl	8001c40 <HAL_DMA_Abort_IT>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d019      	beq.n	8002e68 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	0018      	movs	r0, r3
 8002e40:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e42:	e011      	b.n	8002e68 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f860 	bl	8002f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	e00c      	b.n	8002e68 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f85b 	bl	8002f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e56:	e007      	b.n	8002e68 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f856 	bl	8002f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002e66:	e037      	b.n	8002ed8 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	46c0      	nop			; (mov r8, r8)
    return;
 8002e6a:	e035      	b.n	8002ed8 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	035b      	lsls	r3, r3, #13
 8002e72:	4013      	ands	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_UART_IRQHandler+0x220>
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	03db      	lsls	r3, r3, #15
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	0352      	lsls	r2, r2, #13
 8002e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 fc39 	bl	8003704 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e92:	e024      	b.n	8002ede <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d017      	beq.n	8002edc <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	0010      	movs	r0, r2
 8002eb4:	4798      	blx	r3
    }
    return;
 8002eb6:	e011      	b.n	8002edc <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_UART_IRQHandler+0x26a>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d00a      	beq.n	8002ede <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fb43 	bl	8003556 <UART_EndTransmit_IT>
    return;
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	e004      	b.n	8002ede <HAL_UART_IRQHandler+0x26a>
      return;
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	e002      	b.n	8002ede <HAL_UART_IRQHandler+0x26a>
    return;
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	e000      	b.n	8002ede <HAL_UART_IRQHandler+0x26a>
    return;
 8002edc:	46c0      	nop			; (mov r8, r8)
  }

}
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b008      	add	sp, #32
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	0000080f 	.word	0x0000080f
 8002ee8:	08003529 	.word	0x08003529

08002eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	2317      	movs	r3, #23
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4aa3      	ldr	r2, [pc, #652]	; (80031dc <UART_SetConfig+0x2c0>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a9e      	ldr	r2, [pc, #632]	; (80031e0 <UART_SetConfig+0x2c4>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a95      	ldr	r2, [pc, #596]	; (80031e4 <UART_SetConfig+0x2c8>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9c:	4b92      	ldr	r3, [pc, #584]	; (80031e8 <UART_SetConfig+0x2cc>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d00f      	beq.n	8002fc8 <UART_SetConfig+0xac>
 8002fa8:	d304      	bcc.n	8002fb4 <UART_SetConfig+0x98>
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d011      	beq.n	8002fd2 <UART_SetConfig+0xb6>
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d005      	beq.n	8002fbe <UART_SetConfig+0xa2>
 8002fb2:	e013      	b.n	8002fdc <UART_SetConfig+0xc0>
 8002fb4:	231f      	movs	r3, #31
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e012      	b.n	8002fe4 <UART_SetConfig+0xc8>
 8002fbe:	231f      	movs	r3, #31
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e00d      	b.n	8002fe4 <UART_SetConfig+0xc8>
 8002fc8:	231f      	movs	r3, #31
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e008      	b.n	8002fe4 <UART_SetConfig+0xc8>
 8002fd2:	231f      	movs	r3, #31
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e003      	b.n	8002fe4 <UART_SetConfig+0xc8>
 8002fdc:	231f      	movs	r3, #31
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d000      	beq.n	8002ff4 <UART_SetConfig+0xd8>
 8002ff2:	e07d      	b.n	80030f0 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8002ff4:	231f      	movs	r3, #31
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d01c      	beq.n	8003038 <UART_SetConfig+0x11c>
 8002ffe:	dc02      	bgt.n	8003006 <UART_SetConfig+0xea>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <UART_SetConfig+0xf4>
 8003004:	e04b      	b.n	800309e <UART_SetConfig+0x182>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d025      	beq.n	8003056 <UART_SetConfig+0x13a>
 800300a:	2b08      	cmp	r3, #8
 800300c:	d037      	beq.n	800307e <UART_SetConfig+0x162>
 800300e:	e046      	b.n	800309e <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff fc54 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003014:	0003      	movs	r3, r0
 8003016:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	005a      	lsls	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	18d2      	adds	r2, r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0019      	movs	r1, r3
 800302a:	0010      	movs	r0, r2
 800302c:	f7fd f86c 	bl	8000108 <__udivsi3>
 8003030:	0003      	movs	r3, r0
 8003032:	b29b      	uxth	r3, r3
 8003034:	61bb      	str	r3, [r7, #24]
        break;
 8003036:	e037      	b.n	80030a8 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	4a6b      	ldr	r2, [pc, #428]	; (80031ec <UART_SetConfig+0x2d0>)
 8003040:	189a      	adds	r2, r3, r2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0019      	movs	r1, r3
 8003048:	0010      	movs	r0, r2
 800304a:	f7fd f85d 	bl	8000108 <__udivsi3>
 800304e:	0003      	movs	r3, r0
 8003050:	b29b      	uxth	r3, r3
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e028      	b.n	80030a8 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7ff fbc3 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800305a:	0003      	movs	r3, r0
 800305c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	18d2      	adds	r2, r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0019      	movs	r1, r3
 8003070:	0010      	movs	r0, r2
 8003072:	f7fd f849 	bl	8000108 <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	b29b      	uxth	r3, r3
 800307a:	61bb      	str	r3, [r7, #24]
        break;
 800307c:	e014      	b.n	80030a8 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	0252      	lsls	r2, r2, #9
 8003088:	189a      	adds	r2, r3, r2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0019      	movs	r1, r3
 8003090:	0010      	movs	r0, r2
 8003092:	f7fd f839 	bl	8000108 <__udivsi3>
 8003096:	0003      	movs	r3, r0
 8003098:	b29b      	uxth	r3, r3
 800309a:	61bb      	str	r3, [r7, #24]
        break;
 800309c:	e004      	b.n	80030a8 <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 800309e:	2317      	movs	r3, #23
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
        break;
 80030a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	d91b      	bls.n	80030e6 <UART_SetConfig+0x1ca>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4a4f      	ldr	r2, [pc, #316]	; (80031f0 <UART_SetConfig+0x2d4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d817      	bhi.n	80030e6 <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	200a      	movs	r0, #10
 80030bc:	183b      	adds	r3, r7, r0
 80030be:	210f      	movs	r1, #15
 80030c0:	438a      	bics	r2, r1
 80030c2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2207      	movs	r2, #7
 80030cc:	4013      	ands	r3, r2
 80030ce:	b299      	uxth	r1, r3
 80030d0:	183b      	adds	r3, r7, r0
 80030d2:	183a      	adds	r2, r7, r0
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	183a      	adds	r2, r7, r0
 80030e0:	8812      	ldrh	r2, [r2, #0]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e06c      	b.n	80031c0 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 80030e6:	2317      	movs	r3, #23
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e067      	b.n	80031c0 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 80030f0:	231f      	movs	r3, #31
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d01b      	beq.n	8003132 <UART_SetConfig+0x216>
 80030fa:	dc02      	bgt.n	8003102 <UART_SetConfig+0x1e6>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <UART_SetConfig+0x1f0>
 8003100:	e049      	b.n	8003196 <UART_SetConfig+0x27a>
 8003102:	2b04      	cmp	r3, #4
 8003104:	d024      	beq.n	8003150 <UART_SetConfig+0x234>
 8003106:	2b08      	cmp	r3, #8
 8003108:	d035      	beq.n	8003176 <UART_SetConfig+0x25a>
 800310a:	e044      	b.n	8003196 <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7ff fbd6 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003110:	0003      	movs	r3, r0
 8003112:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085a      	lsrs	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	18d2      	adds	r2, r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f7fc ffef 	bl	8000108 <__udivsi3>
 800312a:	0003      	movs	r3, r0
 800312c:	b29b      	uxth	r3, r3
 800312e:	61bb      	str	r3, [r7, #24]
        break;
 8003130:	e036      	b.n	80031a0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	4a2e      	ldr	r2, [pc, #184]	; (80031f4 <UART_SetConfig+0x2d8>)
 800313a:	189a      	adds	r2, r3, r2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0019      	movs	r1, r3
 8003142:	0010      	movs	r0, r2
 8003144:	f7fc ffe0 	bl	8000108 <__udivsi3>
 8003148:	0003      	movs	r3, r0
 800314a:	b29b      	uxth	r3, r3
 800314c:	61bb      	str	r3, [r7, #24]
        break;
 800314e:	e027      	b.n	80031a0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003150:	f7ff fb46 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003154:	0003      	movs	r3, r0
 8003156:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	085a      	lsrs	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	18d2      	adds	r2, r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0019      	movs	r1, r3
 8003168:	0010      	movs	r0, r2
 800316a:	f7fc ffcd 	bl	8000108 <__udivsi3>
 800316e:	0003      	movs	r3, r0
 8003170:	b29b      	uxth	r3, r3
 8003172:	61bb      	str	r3, [r7, #24]
        break;
 8003174:	e014      	b.n	80031a0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	2280      	movs	r2, #128	; 0x80
 800317e:	0212      	lsls	r2, r2, #8
 8003180:	189a      	adds	r2, r3, r2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0019      	movs	r1, r3
 8003188:	0010      	movs	r0, r2
 800318a:	f7fc ffbd 	bl	8000108 <__udivsi3>
 800318e:	0003      	movs	r3, r0
 8003190:	b29b      	uxth	r3, r3
 8003192:	61bb      	str	r3, [r7, #24]
        break;
 8003194:	e004      	b.n	80031a0 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8003196:	2317      	movs	r3, #23
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
        break;
 800319e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	d908      	bls.n	80031b8 <UART_SetConfig+0x29c>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <UART_SetConfig+0x2d4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d804      	bhi.n	80031b8 <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	e003      	b.n	80031c0 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 80031b8:	2317      	movs	r3, #23
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031cc:	2317      	movs	r3, #23
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	781b      	ldrb	r3, [r3, #0]
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b008      	add	sp, #32
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	ffff69f3 	.word	0xffff69f3
 80031e0:	ffffcfff 	.word	0xffffcfff
 80031e4:	fffff4ff 	.word	0xfffff4ff
 80031e8:	40021000 	.word	0x40021000
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	0000ffff 	.word	0x0000ffff
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2201      	movs	r2, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d00b      	beq.n	8003222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a4a      	ldr	r2, [pc, #296]	; (800333c <UART_AdvFeatureConfig+0x144>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2202      	movs	r2, #2
 8003228:	4013      	ands	r3, r2
 800322a:	d00b      	beq.n	8003244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a43      	ldr	r2, [pc, #268]	; (8003340 <UART_AdvFeatureConfig+0x148>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d00b      	beq.n	8003266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a3b      	ldr	r2, [pc, #236]	; (8003344 <UART_AdvFeatureConfig+0x14c>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2208      	movs	r2, #8
 800326c:	4013      	ands	r3, r2
 800326e:	d00b      	beq.n	8003288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <UART_AdvFeatureConfig+0x150>)
 8003278:	4013      	ands	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2210      	movs	r2, #16
 800328e:	4013      	ands	r3, r2
 8003290:	d00b      	beq.n	80032aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <UART_AdvFeatureConfig+0x154>)
 800329a:	4013      	ands	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00b      	beq.n	80032cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a25      	ldr	r2, [pc, #148]	; (8003350 <UART_AdvFeatureConfig+0x158>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2240      	movs	r2, #64	; 0x40
 80032d2:	4013      	ands	r3, r2
 80032d4:	d01d      	beq.n	8003312 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <UART_AdvFeatureConfig+0x15c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	035b      	lsls	r3, r3, #13
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10b      	bne.n	8003312 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <UART_AdvFeatureConfig+0x160>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	4013      	ands	r3, r2
 800331a:	d00b      	beq.n	8003334 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <UART_AdvFeatureConfig+0x164>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}
 800333c:	fffdffff 	.word	0xfffdffff
 8003340:	fffeffff 	.word	0xfffeffff
 8003344:	fffbffff 	.word	0xfffbffff
 8003348:	ffff7fff 	.word	0xffff7fff
 800334c:	ffffefff 	.word	0xffffefff
 8003350:	ffffdfff 	.word	0xffffdfff
 8003354:	ffefffff 	.word	0xffefffff
 8003358:	ff9fffff 	.word	0xff9fffff
 800335c:	fff7ffff 	.word	0xfff7ffff

08003360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800336e:	f7fe fb5d 	bl	8001a2c <HAL_GetTick>
 8003372:	0003      	movs	r3, r0
 8003374:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	4013      	ands	r3, r2
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10d      	bne.n	80033a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	0399      	lsls	r1, r3, #14
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <UART_CheckIdleState+0x88>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	0013      	movs	r3, r2
 8003392:	2200      	movs	r2, #0
 8003394:	f000 f82a 	bl	80033ec <UART_WaitOnFlagUntilTimeout>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e01f      	b.n	80033e0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2204      	movs	r2, #4
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d10d      	bne.n	80033ca <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	03d9      	lsls	r1, r3, #15
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <UART_CheckIdleState+0x88>)
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	0013      	movs	r3, r2
 80033bc:	2200      	movs	r2, #0
 80033be:	f000 f815 	bl	80033ec <UART_WaitOnFlagUntilTimeout>
 80033c2:	1e03      	subs	r3, r0, #0
 80033c4:	d001      	beq.n	80033ca <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e00a      	b.n	80033e0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2270      	movs	r2, #112	; 0x70
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	01ffffff 	.word	0x01ffffff

080033ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	e05d      	b.n	80034ba <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	3301      	adds	r3, #1
 8003402:	d05a      	beq.n	80034ba <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fe fb12 	bl	8001a2c <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11b      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	492f      	ldr	r1, [pc, #188]	; (80034e4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003426:	400a      	ands	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	438a      	bics	r2, r1
 8003438:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2270      	movs	r2, #112	; 0x70
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e043      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2204      	movs	r2, #4
 800345a:	4013      	ands	r3, r2
 800345c:	d02d      	beq.n	80034ba <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	401a      	ands	r2, r3
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	429a      	cmp	r2, r3
 8003470:	d123      	bne.n	80034ba <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4917      	ldr	r1, [pc, #92]	; (80034e4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003488:	400a      	ands	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	438a      	bics	r2, r1
 800349a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2270      	movs	r2, #112	; 0x70
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e00f      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	425a      	negs	r2, r3
 80034ca:	4153      	adcs	r3, r2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	001a      	movs	r2, r3
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d092      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b004      	add	sp, #16
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	fffffe5f 	.word	0xfffffe5f

080034e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	490a      	ldr	r1, [pc, #40]	; (8003524 <UART_EndRxTransfer+0x3c>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2101      	movs	r1, #1
 800350c:	438a      	bics	r2, r1
 800350e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}
 8003524:	fffffedf 	.word	0xfffffedf

08003528 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	225a      	movs	r2, #90	; 0x5a
 800353a:	2100      	movs	r1, #0
 800353c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2252      	movs	r2, #82	; 0x52
 8003542:	2100      	movs	r1, #0
 8003544:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff fcdf 	bl	8002f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	438a      	bics	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff fcb5 	bl	8002eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003594:	230e      	movs	r3, #14
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	215c      	movs	r1, #92	; 0x5c
 800359c:	5a52      	ldrh	r2, [r2, r1]
 800359e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a4:	2b22      	cmp	r3, #34	; 0x22
 80035a6:	d140      	bne.n	800362a <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	210c      	movs	r1, #12
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80035b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	230e      	movs	r3, #14
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	400a      	ands	r2, r1
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	225a      	movs	r2, #90	; 0x5a
 80035da:	5a9b      	ldrh	r3, [r3, r2]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b299      	uxth	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	225a      	movs	r2, #90	; 0x5a
 80035e6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	225a      	movs	r2, #90	; 0x5a
 80035ec:	5a9b      	ldrh	r3, [r3, r2]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d122      	bne.n	800363a <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4911      	ldr	r1, [pc, #68]	; (8003644 <UART_RxISR_8BIT+0xb8>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fc6a 	bl	8002efc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003628:	e007      	b.n	800363a <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2108      	movs	r1, #8
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	fffffedf 	.word	0xfffffedf

08003648 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003650:	230e      	movs	r3, #14
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	215c      	movs	r1, #92	; 0x5c
 8003658:	5a52      	ldrh	r2, [r2, r1]
 800365a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003660:	2b22      	cmp	r3, #34	; 0x22
 8003662:	d140      	bne.n	80036e6 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	210c      	movs	r1, #12
 800366a:	187b      	adds	r3, r7, r1
 800366c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800366e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003676:	187b      	adds	r3, r7, r1
 8003678:	220e      	movs	r2, #14
 800367a:	18ba      	adds	r2, r7, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	4013      	ands	r3, r2
 8003682:	b29a      	uxth	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	225a      	movs	r2, #90	; 0x5a
 8003696:	5a9b      	ldrh	r3, [r3, r2]
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b299      	uxth	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	225a      	movs	r2, #90	; 0x5a
 80036a2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	225a      	movs	r2, #90	; 0x5a
 80036a8:	5a9b      	ldrh	r3, [r3, r2]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d122      	bne.n	80036f6 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4911      	ldr	r1, [pc, #68]	; (8003700 <UART_RxISR_16BIT+0xb8>)
 80036bc:	400a      	ands	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	438a      	bics	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff fc0c 	bl	8002efc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036e4:	e007      	b.n	80036f6 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2108      	movs	r1, #8
 80036f2:	430a      	orrs	r2, r1
 80036f4:	619a      	str	r2, [r3, #24]
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	fffffedf 	.word	0xfffffedf

08003704 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <__libc_init_array>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	2600      	movs	r6, #0
 8003718:	4d0c      	ldr	r5, [pc, #48]	; (800374c <__libc_init_array+0x38>)
 800371a:	4c0d      	ldr	r4, [pc, #52]	; (8003750 <__libc_init_array+0x3c>)
 800371c:	1b64      	subs	r4, r4, r5
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	42a6      	cmp	r6, r4
 8003722:	d109      	bne.n	8003738 <__libc_init_array+0x24>
 8003724:	2600      	movs	r6, #0
 8003726:	f000 f821 	bl	800376c <_init>
 800372a:	4d0a      	ldr	r5, [pc, #40]	; (8003754 <__libc_init_array+0x40>)
 800372c:	4c0a      	ldr	r4, [pc, #40]	; (8003758 <__libc_init_array+0x44>)
 800372e:	1b64      	subs	r4, r4, r5
 8003730:	10a4      	asrs	r4, r4, #2
 8003732:	42a6      	cmp	r6, r4
 8003734:	d105      	bne.n	8003742 <__libc_init_array+0x2e>
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	00b3      	lsls	r3, r6, #2
 800373a:	58eb      	ldr	r3, [r5, r3]
 800373c:	4798      	blx	r3
 800373e:	3601      	adds	r6, #1
 8003740:	e7ee      	b.n	8003720 <__libc_init_array+0xc>
 8003742:	00b3      	lsls	r3, r6, #2
 8003744:	58eb      	ldr	r3, [r5, r3]
 8003746:	4798      	blx	r3
 8003748:	3601      	adds	r6, #1
 800374a:	e7f2      	b.n	8003732 <__libc_init_array+0x1e>
 800374c:	080037fc 	.word	0x080037fc
 8003750:	080037fc 	.word	0x080037fc
 8003754:	080037fc 	.word	0x080037fc
 8003758:	08003800 	.word	0x08003800

0800375c <memset>:
 800375c:	0003      	movs	r3, r0
 800375e:	1812      	adds	r2, r2, r0
 8003760:	4293      	cmp	r3, r2
 8003762:	d100      	bne.n	8003766 <memset+0xa>
 8003764:	4770      	bx	lr
 8003766:	7019      	strb	r1, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	e7f9      	b.n	8003760 <memset+0x4>

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
